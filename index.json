[
{
	"uri": "https://nocturover.github.io/csharp/common/01_common/",
	"title": "01.Reflection",
	"tags": [],
	"description": "",
	"content": "Overview  C# 문법 Reflection 의 활용법 기술\n\r\rWiki  동적 바인딩 기능을 내포한 객체  일반적으로 코드의 컴파일이 된 시점부터 프로그램은 컴파일된 코드의 구성에 따라 거동된다. Reflection을 이용하면 객체의 생성과 연결(binding), Invoking Method, Event Subscribing Method List를 추출하여 동적으로 사용하는 것이 가능하다. Plug-In 방식의 코드 구성에 활용가능하다.  \rUsage  Event - Get Invocation List  이번 챕터에서는 하나의 Instance 객체의 특정 이벤트에 등록된 Method를 추출하여 호출(Invoke)하거나, Window.Form.Control 객체의 Deep Copy(Clone())에 활용하는 예시를 보여준다.   Instance(txt)의 특정 EventHandler 정보를 추출  private void TestReflectionCopy() { // TextBox instance의 생성과 Event(2) 등록  TextBox txt = new(); txt.TextChanged += txt_TextChanged; txt.Click += (sender, e) =\u0026gt; { MessageBox.Show(\u0026#34;Textbox Clicked\u0026#34;); }; // TextBox 공통 클래스의 Events Property의 주소를 가져와 인스턴스화된 txt 객체에 반영된 Events를 특정  // txt.GetType() == typeof(TextBox)  PropertyInfo propertyInfo = txt.GetType().GetProperty(\u0026#34;Events\u0026#34;, BindingFlags.NonPublic | BindingFlags.Static | BindingFlags.Instance); EventHandlerList eventHandlerList = propertyInfo.GetValue(txt, new object[] { }) as EventHandlerList; // TextBox 공통 클래스의 Fileds 중 특정 EventHandler의 문자열 이름으로부터 객체 정보(FieldInfo)를 추출  // var fields = typeof(Control).GetFields(BindingFlags.NonPublic | BindingFlags.Static);\t// *문자열 이름 참고용 코드  FieldInfo fieldInfo = typeof(Control).GetField(\u0026#34;s_textEvent\u0026#34;, BindingFlags.NonPublic | BindingFlags.Static); // txt 인스턴스 객체로부터 TextEvent관련 값을 handlerList 중 Indxer로 색인하여, txt 인스턴스 객체의 특정 EvenetHandler를 추출  object eventKey = fieldInfo.GetValue(txt); var eventHandler = eventHandlerList[eventKey] as Delegate; Delegate[] invocationList = eventHandler.GetInvocationList(); } private void txt_TextChanged(object sender, EventArgs e) { MessageBox.Show(\u0026#34;TextChanged\u0026#34;); } Invoke Method  foreach (EventHandler method in invocationList) { method.Invoke(this, EventArgs.Empty); } 새로운 Instance에 txt인스턴스의 txt_TextChanged Method를 복사 등록  TextBox instance = Activator.CreateInstance\u0026lt;TextBox\u0026gt;(); EventInfo eventInfo = typeof(TextBox).GetEvent(\u0026#34;TextChanged\u0026#34;); foreach (EventHandler methodHandle in invocationList) { if (methodHandle.Method.Name.Equals(\u0026#34;txt_TextChanged\u0026#34;)) { eventInfo.AddEventHandler(instance, methodHandle); } }  일반적인 경우에서 Method의 이름을 알고 있기 때문에 위와 같이 번거러운 추출작업을 할 필요가 없겠으나, 하나의 EventHandler에 다수의 Method가 구독되어 있는 형태이거나, lambda 형태로 특정하기 어려운 형태에서 적용 가능하다.  ex) 특정 이벤트의 전체 구독을 취소(GetInvocationList.foreach() → eventInfo.RemoveEventHandler(instance, methodHandler))    Troubleshooting   Field 의 명이 커뮤니티 내에서는 Event+{EventName}의 형태로 알려져 있지만, s_click, s_textEvent의 형태로 존재하였다. TextChanged Event는 똑같은 Naming이 아닌 s_textEvent 내에 소속된 형태로 보여진다.  FieldInfo fieldInfo = typeof(Control).GetField(\u0026#34;s_textEvent\u0026#34;, BindingFlags.NonPublic | BindingFlags.Static); \r       \nSummary  Reference Link\nMSDS - Reflection\nHow to create a new object instance from a Type]\n\r\r"
},
{
	"uri": "https://nocturover.github.io/csharp/common/",
	"title": "Common",
	"tags": [],
	"description": "C#-Common",
	"content": "Overview  이 곳은 C# 공통 학습공간 입니다.\nLink 01.Reflection \n\r\r"
},
{
	"uri": "https://nocturover.github.io/csharp/winform/",
	"title": "Winform",
	"tags": [],
	"description": "C#-Winform",
	"content": "Overview  이 곳은 C# Winform의 학습공간 입니다.\nLink 01_Form_Group \n 02. C# Event \n 03. Thread/Invoke/BeginInvoke \n 04. TreeView Text Finder \n 05. ListBox Flicker \n  \n\r\r"
},
{
	"uri": "https://nocturover.github.io/project/investo/",
	"title": "Investo",
	"tags": [],
	"description": "Project-Investo",
	"content": "Overview 이 곳은 프로젝트 Investo 의 Trouble shooting 과 진척도를 기록하는 공간입니다.\n"
},
{
	"uri": "https://nocturover.github.io/project/investo/progress/01_progress/",
	"title": "01. Progress",
	"tags": [],
	"description": "",
	"content": "Purpose Progress    Scheduler\n  Windows scheduler list Scheduler add / edit / remove configuration with Queue manager Managing All Server Scheduler list and Editable system Logging for start/running/end time with Error code send Log to Telegram / Socket / Web socket for user interface     API\n  Scrape API Data (Daily/Tick/Financial Statement) as Command Scrape API Data (Financial Statement) as Win32API Click and Save File Dialog Scrape Real time data for avoiding API Transaction limitation Analyze Real time data with Python/C# DataFame and view Data Visualization Load and Execute Conditional state for sub Ordering system     Web\n  Scrape Web contents (Financial Statement/People Thought) using Selenium nuget Scrape Web contents (Financial Statement/People Thought) using Python Requests Lib     Telegram / Site\n  Show Basic Report as .Docs or .Xls Provide that Stop all ordering system called Emergency Stop Receive message or command that can send socket from new client of Ordering Server Set all Configuration for Time Scheduler Send Screenshot to remote user that control window task status     DB\n  Save and Load on Local/Remote server order to Analyzing, Ordering, Logging, Back Testing etc.     Check List    Strategies\n  Metacognition Robust Results     Strategy - Parameters\n  Change value in Parameters for testing after market Automatically Change value and pronunciate Optimaized Result     "
},
{
	"uri": "https://nocturover.github.io/csharp/db/",
	"title": "DB",
	"tags": [],
	"description": "C#-DB",
	"content": "Overview  이 곳은 C# Database 연동의 학습공간 입니다.\nLink 01. MariaDB connection \n 02. SQL 문법 \n 03. SQL 캡슐화 \n 04. DB 적재 및 불러오기 \n 05. Connection Pooling \n\r\r"
},
{
	"uri": "https://nocturover.github.io/web/hugo/",
	"title": "Hugo",
	"tags": [],
	"description": "Hugo",
	"content": "Overview 이 곳은 Go-Hugo Static site 개설과 커스터마이징 학습 공간입니다.\nLink 01. Custom Theme \n 02. FAVICON \n 03. ShortCodes \n\r\r"
},
{
	"uri": "https://nocturover.github.io/git/troubleshooting/",
	"title": "Troubleshooting",
	"tags": [],
	"description": "Troubleshooting",
	"content": "Overview 이 곳은 Git Troubleshooting을 다룹니다.\n\r1. Setting     항목 내용 중요도     00_CRLF_TROUBLE\r core.autocrlf true설정 ⭐   01_SSH\r ssh-keygen 생성 및 등록 ⭐⭐              "
},
{
	"uri": "https://nocturover.github.io/windows/cmder/",
	"title": "cmder",
	"tags": [],
	"description": "Windows-cmder",
	"content": "Overview  이 곳은 commander application cmder 의 자주사용되는 기능들을 기술한 공간입니다.\nLink Command \n\r\r"
},
{
	"uri": "https://nocturover.github.io/hello/",
	"title": "Hello",
	"tags": [],
	"description": "Introduction of this site.",
	"content": "Overview 이 사이트는 코딩과 그 밖의 모든 것에 대한 보관함 입니다.\n\r[사용가능 도구들] \r[ALERT]  \rprimary is a primary\rinfo is a text\rsuccess is a text\rwarning is a text\rdanger is a text\rdark is a dark\rlight is a light\rsecondary is a secondary\r\r[ATTATCHMENTS]  \t\r_files\r\rCarroll_AliceAuPaysDesMerveilles.pdf\u0026nbsp;(175 kB)adivorciarsetoca00cape.pdf\u0026nbsp;(212 kB)hugo.png\u0026nbsp;(17 kB)movieselectricsheep-flock-244-32500-2.mp4\u0026nbsp;(340 kB)zip.mp3\u0026nbsp;(57 kB)\r\r\r[TAB]  PHP\r​\tThis is how we do a Hello world with php\n\u0026lt;?php Print \u0026#34;Hello, World!\u0026#34;; ?\u0026gt;​\nGolang\r​\tThis is how we do a Hello world with go\npackage main import \u0026#34;fmt\u0026#34; func main() { fmt.Println(\u0026#34;hello world\u0026#34;) }\t​\nJava\r​\tThis is how we do a Hello world with java\nclass HelloWorld { public static void main(String[] args) { System.out.println(\u0026#34;Hello, World!\u0026#34;); } } ​\n\r\r[BADGE]  primary (default) In progress docport beta danger warning info light dark\n\r[BUTTON]  Google 이동\rInsight 페이지 이동\r\r\r[COLUMN]  1st column Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.\r\r2nd column Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat.\r\rlast column Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non\r\r \r[EXCERPT]  excerpt paragraph test\r\u0026lt;Excerpt\u0026gt;\r{{% alert primary %}} excerpt paragraph test {{% /alert %}}\r\r\r\r[EXPAND]  \rExpand me\r\rgit\nλ git submodule add https://github.com/~/~.git themes/~ \r\r\r[NOTICE]  TODOLearn language\n\r\r[PANEL]  panel titlethis is a panel text\npanel footer\r\r[ICON]  ICON LINKFONTAWESOME\n\r\n   "
},
{
	"uri": "https://nocturover.github.io/project/investo/idea/",
	"title": "Idea",
	"tags": [],
	"description": "Project-Investo-Idea",
	"content": "Overview 이 곳은 프로젝트 Investo 의 Idea Archive 공간입니다.\n​\n"
},
{
	"uri": "https://nocturover.github.io/daily/",
	"title": "Daily",
	"tags": [],
	"description": "Daily",
	"content": "Overview  이 곳은 Daily Report를 기록하는 공간입니다.\n\rDaily Children List  \r01. 선택과 집중\r1 모든 선택에는 에너지가 소모되더라도 객관화가 필요하다. 여기서 말하는 객관화는 자기 객관화를 의미하는데, 자신의 능력 정도를 평가하는 방식부터 현재 하려는 행동의 방향성까지 모두 생각이 닿을 수 있는 끝자락까지는 수행하는 것이 옳다. 이런 방식이 반드시 옳은 선택을 부여하는 것은 아니지만 닥친 상황에서의 최선의 선택을 할 수 있게끔 방향성을 제시해주고 또 다른 루트를 열어주는 역할을 한다. 사소한 코드 구현 방식부터 일상생활에 모두 녹여야할 가치가 있다. 2 단축키 / 커맨드는 극한의 생산성을 요하는 프로가 아니더라도 필수적인 덕목이자 행동양식이라고 생각한다.\n\r\r02. 숙달과 일처리\r1 어떤 일이든 메뉴얼 / 경험사례가 존재하지 않는 온전히 새로운 일을 시도하는 것이 아니라면, 어느정도 옳바른 방식의 접근법을 알고 시간을 투자하면 궤도에 오르는 것이 가능하다. 그것은 학습하는 과정 자체가 될 수도 있으며 행동자체를 의미하기도 한다. 2 해야할 과제가 주어졌을 때 무작정 시작하는 방법은 무식할 수 있지만, 접근법을 메타인지적 관점에서 고려하고 빠르게 처리하려는 자세는 심적 부담을 줄여주는 동시에 돌아볼 수 있는 여유 시간을 부여하기 때문에 언제나 빠른 접근은 나은 결과를 창출할 수 있는 것 같다.\n\r\r03. 마음관리\r1 심리적 변화의 원천을 아는 것은 더한 심연에 빠지는 것을 방지해줄 수 있다. 자기 자신이 현재 어떤 기분을 느끼고 있는가, 이것은 무슨 감정이며 어디에서 발현된 것인가를 고민해보자. 물론 답이 나오지 않는 경우도 있겠지만, 대게는 그와 비슷했던 과거의 경험들이 오버랩되면서 현재의 상태가 이해될 수 있으리라 생각된다. 내가 현재 뭘하고 있는 건가 방향성이 흔들릴 때도 분명히 있다. 그런 불안감을 잠재우기 위해서 자잘한 계획들을 세우기도 하고 현실의 상황과 미래의 상황을 구체적으로 그려가는 편이다.\n\r\r04. 배움\r1 설계는 언제나 필요하다. pre- 의 개념으로 학습의 전 단계에서, 프로젝트의 계획 전에도 사소하게는 둘 중 하나의 선택을 해야하는 경우에도 적용될 수 있다. 정석적이며 보편적인 기본 내용들을 놓치고 싶지 않다면 인쇄물로 접근하는 방식이 간편할 수 있으며, 최신의 정보를 얻어내고 싶다면 공식 문서를 찾아보는 편이 좋다. 전체적인 흐름을 보고 싶다면, 실제 사용되고 있는 장면을 상상할 여지를 남겨줄 수 있는 비디오를 시청하는 것도 방법이다. 2 단축키를 익히는 것 또한 언제나 필요하다. 삶의 편리함이 주된 목표가 되지는 않는다.\n\r\r05. 허무주의\r1 피아노를 치기 시작한지 대략 9개월이 다 되었다. 음악 활동을 하는 건 몰입의 괜찮은 재료로 작용되어, 그 순간만큼은 오감에 집중할 수 있게 된다. 감정적 기복을 모두 내려놓고 할당된 시간을 연습시간으로 활용함으로써 평균에 해당하는 고요함을 찾기위한 과정이라고 생각된다. 무기력증, 헛됨, 허무주의로부터의 탈출하길 희망하면서도 파고드는 무력감을 느낄 때면 이런 몰입과정을 거치는 것이 필요할 때라는 신호이다. 요 며칠간의 망가진 자신의 모습을 보고있자면, 내가 아닌 타인이 되어 나를 바라보는 듯한, 내가 내가 아니게 될 때가 있다.\n\r\r06. 목표지향\r1 무엇보다 나를 난감하게 만드는 것은 스스로의 효용가치를 잊을 때이다. 무엇을 원하고 어떤 삶을 살아가기를 원하며, 그를 위한 지향점을 상상해나가는 과정 자체를 부정한다.\n\r\r07. Performance\r1 모든 기기들은 자신만의 상대적인 성능을 가지고 있다. 최신의 제품이 과거 제품 보다 가격이 높은 까닭을 증명하기 위한 데이터셋을 제공해주는 역할을 한다. 소비자는 해당 벤치마크나 성능표를 확인하고 나에게 적합한 제품인지를 판단하는 척도로 사용이 가능하다. 사람도 마찬가지로 성능이 존재한다. 스스로의 앎을 척도로 나타내자면, 메타인지적 사고능력과 객관화로부터 새로운 계획을 세우고 회귀하는 빈도나 정확도를 점으로 찍어본다면 하나의 성능 결과표가 나올 것이다. 또한 스스로의 상황에서 최적의 목표를 지향점으로 삼고 환경의 변화에 따른 기존 파라미터의 증감이나 삭제/추가를 연속하며, 온전한 최적화 상황을 만들어가는 것의 빈도나 퀄리티를 척도로 삼을 수도 있겠다.\n\r\r01.Reflection\r1. 정리의 목적이 있다면 상기되는 주기를 줄여 기억의 망각 주기를 거스르기 위해서라고 말할 수 있겠다. 새로운 것을 습득하는 과정에서\n\r\r"
},
{
	"uri": "https://nocturover.github.io/project/investo/progress/02_plan/",
	"title": "01. Plan",
	"tags": [],
	"description": "",
	"content": "Investo  1.\n현 상황에서 재료의 준비상태를 확인한다.\n초창기 해당 프로젝트의 완성 이미지는 다음과 같았다.\na. WinForm UI를 이용한 System 사용자 컨트롤 b. Socket 통신을 통한 최소 3대 컴퓨터 간의 Queue 관리 시스템 ​\t가) Main Com(Order Server) : Open Api 주 거래 계좌를 이용해 거래(체결) 및 SS, AS의 총 Queue 관리\n​\t나) Scrape Server : Web/API 내 데이터를 Win Scheduler에 따라 수집하고 Database에 적재 + OS에서 수행한 체결데이터(리포트 관리)를 Database에 적재 후 당일 리포트 발행 + Open API 실시간 데이터 수집 및 직전일 데이터 마이그레이션\n​\t{{emoji}}:star:{{/emoji}}\u0026gt;다) Analyze Server : 직전일 데이터 / 당일 비정규 데이터 / 실시간 거래량 데이터 / 실시간 매수인 데이터 등 가용 가능 데이터 표준화 분석 후 ..\nAnalyze Server  [캘리 법칙 / Position Size / Portfolio Ratio / Montecarlo Method 등 매매 접근 전략] +\n  [Market Winner Section / 무한 가격 분할 매수 전략 / 승률 비례 종목 무한 분할 매수 전략 / (역)추세추종 전략(터틀) / 시계열 패널티 팩터 전략 / 이슈기반 탑-다운 / 사이클 기반 탑-다운 / 재무재표 기반 중장기(배당률,안정성,성장성,개발비,Valuation 등) / 근래 수혜주,대체주 전략 / 스프레드 차익거래 / GDP,금리,수공급 거시 경제 기반 사이클 섹터 매매 전략 / ETF xX 레버리지 무한매수 전략 / Mdd 백테스트 기반 승률 포지션 기반 종합 전략 / 헤지전략(콜,풋 후 변동성 기반 리밸런싱 무한 반복 : 주식-코인,대체재,채권) / 상관관계 헤지 / 스프레드 선형회귀 전략 / 주택공급량 분석 기반 건설,지주,사모,원자재납품,부동산중개업황 섹터 세부 접근 매매 / 행동경제학 기반 매매 / 직전일 미증시 및 중,홍콩 증시 기반 섹터 예상 타이밍 매매 / 지지 저항 선 롤링 계산 기반 약한 추세추종, 볼린저 / 호가총량 행동경제학 / 매수근거 훼손 패널티 팩터 리밸런싱 매매 / 지수(벌크운임지수,채광,원자재물량,이송,날씨,수확량) 기반 매매 전략 / 대장주 재무제표 건정성 비교 매매 전략 / 사이클 전환 리밸런싱 / 전략 조합 파라미터 변동 종합 전략 등 매매 전략] +\n  [Srim 목표가격 산정 / Valuation 목표가격 산정 / 리밸런싱,헤지 / Mdd / Log Scale 등 매매 탈출전략]\n​\t매매접근전략 + 매매전략 + 매매탈출전략 을 조합하여 최적의 지속가능하며 동적인 알파 찾기 패턴을 고수\n  Strategies\rc. Exception A/S system ​\t가) 스크린샷 텔레그램 전송 및 텔레그램 소켓 통신을 통한 프로그램, 컴퓨터 재시작 + GC Collect 기능 제공\n​\t나) Emergency Stop : 모든 종목 청산\n​\t다) 시스템 이상(온도, 리소스 점유율) 로그 및 자동 재시작 기능\n"
},
{
	"uri": "https://nocturover.github.io/project/investo/progress/",
	"title": "Progress",
	"tags": [],
	"description": "Project-Investo-Progress",
	"content": "Overview 이 곳은 프로젝트 Investo 의 Progress 기록 공간입니다.\n일부 내용은 정보 보호를 위해 생략되거나 축약되어 있습니다.\n\rPlan   ~\u0026lsquo;21.10.31 | 기본 메뉴바 기능 구현 완료 (draft / 세부기능 생략) ~\u0026lsquo;21.11.31 | 전략 1 구현 및 Socket 활성화 ~\u0026lsquo;21.12.10 | Refactoring ~\u0026lsquo;21.12.31 | 전략 2 구현 및 최적화 (피드백 바탕) \u0026lsquo;21.12.31 | 방향성 검토 및 플랜 세부화 ~\u0026lsquo;22.01.15 | PS MK 적용 ~\u0026lsquo;22.01.31 | Parametere 적용 테스터 제작 ~\u0026lsquo;22.01.15 | R.P.yer 제작 ~\u0026lsquo;22.01.15 | BS 전략 모두 적용  \rProgress  2021.10.18 (Mon) 이전 코드 리뷰 passing 20  0.5 [hr]\r2021.10.20 (Wed) 쉬는 기간(5일) 이전 코드 리뷰\tpassing 21 구현 가능 리스트 추출 passing 22  1 [hr]\r2021.10.21 (Thur) 구현 기능 리스트 추출 passing 23  주문 기능   이전 코드 리뷰 및 필요시 기고  ParentMDIForm / AccountChildForm / CodeLink / Usage\r1.5 [hr]\r2021.10.22 (Fri) ~~API - R.T. HOG_ Sub/Pub Limit 검토~~ passing 23  0.5 [hr]\r2021.10.25 (Mon) Function lists passing 미정  DB Connection Child Form DB updater   Child Folder migration  2 [hr]\r2021.10.26 (Tue) Prototype 제작 (Connection UI)  2 [hr]\r2021.10.27 (Wed) Prototype 제작  DB Encapsulation API Encapsulation passing 28    5 [hr]\r2021.10.28 (Thr) Prototype 제작  API Encapsulation - (검토결과 : 필요X) ChildConnectionForm (DB, API status)    5 [hr]\r2021.10.29 (Fri)  Prototype 제작\n ChildConnectionForm (DB, API status) DB connection pooling 방식 적용 Pause  array type (관리차원) Garbage Collector 원리 적용      Code Standard ver_1.0\n  5 [hr]\r2021.10.30 (Sat)  Prototype 제작\n ChildConnectionForm (DB, API status)    Code Standard ver_1.0\n  5 [hr]\r2021.10.31 (Sun)  Prototype 제작\n ChildConnectionForm (DB, API status)  APItestUtilForm.cs      Code Standard ver_1.0\n  3 [hr]\r2021.11.02 (Tue) 프로토타입의 취지에 맞게 Prototype 제작  ChildConnectionForm (DB, API status)  APItestUtilForm.cs     Code Standard ver_1.0 Pseudo Code 작성 UML 작성  3 [hr]\r2021.11.10 (Wed) 프로토타입의 취지에 맞게 Prototype 제작  LSR (Log-Socket-Rerun)   Code Standard ver_1.0 Pseudo Code 작성 UML 작성  2 [hr]\r2021.11.11 (Thr) 프로토타입의 취지에 맞게 Prototype 제작  LSR (Log-Socket-Rerun) Socket Module 완성 (Console) [+] header / body protocol   Code Standard ver_1.0 Pseudo Code 작성 UML 작성  2 [hr]\r2021.11.13 (Sat) 프로토타입의 취지에 맞게 Prototype 제작  High performance Server/Client Socket Module   Code Standard ver_1.0 Pseudo Code 작성 UML 작성  2 [hr]\r2021.11.17 (Wed) 프로토타입의 취지에 맞게 cInvesto_module 작성  physical    Code Standard ver_1.0    Strategy Form 작성  const Class 생성 Screen No 체계화 Scraping Socket (마지막 데이터-파라미터) Log TimeLine DB-Table 조직화 제한우회 (Multiple ID)   적용  DEBUG - 팁사용, #IF 전처리문 BIT COL in DB-Table UNIT_TEST (Boolean) Pseudo Code 작성 UML 작성    2 [hr]\r\r2021.11.26 (Fri) 현재 진행상태 점검  Socket Telegram  Telegram with Screenshot Telegram with sending Socket Server Command Telegram with Command that stop emergency   DB 적재  T. Data  RT After Maket Scrape from web     Data Analyze  Dataframe for c# measure overhead with Communicating py StdOut and c# Program that simple change data parameter for analyze back / after Visualiztion     Time Schedular 작성 및 연계성 검토 Data 적재 관련 리스트 생성 데이터 분석 방향성 검토  계획\r"
},
{
	"uri": "https://nocturover.github.io/csharp/winform/01_form_group/",
	"title": "01_Form_Group",
	"tags": [],
	"description": "C#-Winform-FormGroup",
	"content": "Overview  .csproj 내에서 파일을 관리하는 방법 중 winform dependent 방식을 소개\n\nWay  Premise  partial class의 작성 .csproj.user 파일 itemgroup 항목 수정  \rCode .csproj.user \u0026lt;?xml version=\u0026#34;1.0\u0026#34; encoding=\u0026#34;utf-8\u0026#34;?\u0026gt; \u0026lt;Project ToolsVersion=\u0026#34;Current\u0026#34; xmlns=\u0026#34;http://schemas.microsoft.com/developer/msbuild/2003\u0026#34;\u0026gt; \u0026lt;ItemGroup\u0026gt; \u0026lt;Compile Update=\u0026#34;childForm/ChildAccount.cs\u0026#34;\u0026gt; \u0026lt;SubType\u0026gt;Form\u0026lt;/SubType\u0026gt; \u0026lt;/Compile\u0026gt; \u0026lt;Compile Update=\u0026#34;childForm/ChildAccount.ANIMATION.cs\u0026#34; DependentUpon=\u0026#34;childForm/ChildAccount.cs\u0026#34;\u0026gt; \u0026lt;/Compile\u0026gt; \u0026lt;Compile Update=\u0026#34;childForm/ChildAccount.OPENAPI.cs\u0026#34; DependentUpon=\u0026#34;childForm/ChildAccount.cs\u0026#34;\u0026gt; \u0026lt;/Compile\u0026gt; \u0026lt;/ItemGroup\u0026gt; \u0026lt;ItemGroup\u0026gt; \u0026lt;EmbeddedResource Update=\u0026#34;Properties\\Resources.resx\u0026#34;\u0026gt; \u0026lt;SubType\u0026gt;Designer\u0026lt;/SubType\u0026gt; \u0026lt;/EmbeddedResource\u0026gt; \u0026lt;/ItemGroup\u0026gt; \u0026lt;/Project\u0026gt;  ItemGroup 내 의존성을 정의 - update=[child] DependentUpon=[parent]  \u0026lt;Compile Update=\u0026#34;childForm/ChildAccount.OPENAPI.cs\u0026#34; DependentUpon=\u0026#34;childForm/ChildAccount.cs\u0026#34;\u0026gt;\u0026lt;/Compile\u0026gt; \nTroubleshooting  1 .csproj.user 의 파일의 변동으로 자동 그륩 해제 혹은 일부 그륩 해제\r 같은 Parent form을 dependent하는 하위 폼들은 한 번에 load되어야 정상 반영 main Form 을 제외하고 하위 form들의 DependentUpon을 포함한 모든 커스텀 속성을 주석처리 후 저장 주석 처리 해제 후 저장 반영 확인  2-1 그륩화된 폼 복사 시 발생하는 오류\n2-2 Parial Form Class의 출력 중복 오류\n\r  폼이 포함하고 있는 리소스 파일 .resx의 출력 중복 오류 - .resx파일 삭제\n  클래스 중복\n  \nSummary   N/A  "
},
{
	"uri": "https://nocturover.github.io/csharp/db/01_mariadb_connection/",
	"title": "01. MariaDB connection",
	"tags": [],
	"description": "",
	"content": "Overview  오픈소스 DBMS MariaDB 와 C#의 연동을 기술.\n\rInstallation  종속성   MySql.Data Assembly Download \u0026amp; Install\n  프로젝트 종속성 로드\n  cd C:\\Program Files (x86)\\MySQL\\MySQL Connector Net 8.0.27\\Assemblies\\net5.0\\MySql.Data.dll \rConnection  Code :: Form using System; using System.Windows.Forms; using MySql.Data.MySqlClient;\t// Load;  namespace UNIT_TEST_DB { public partial class MainForm : Form { public MainForm() { InitializeComponent(); } ~MainForm() { conn.Close(); conn.Dispose(); } MySqlConnection conn;\t// local variable;  private bool connectMariaDB() { string connStr = string.Format(\u0026#34;Server={0};Port={1};Database={2};Uid={3};Pwd={4};\u0026#34;, this.txtServer.Text, \u0026#34;3306\u0026#34;, this.txtDB.Text, this.txtId.Text, this.txtPwd.Text); try { conn = new MySqlConnection(connStr);\t// connection;  conn.Open(); return true; } catch(Exception e) { Console.WriteLine(e); return false; } } private void btnClose_Click(object sender, EventArgs e) { this.Close(); } private void btnConn_Click(object sender, EventArgs e) { if (connectMariaDB() == true)\t// Print;  { this.lblStatus.Text = \u0026#34;Success\u0026#34;; } else { this.lblStatus.Text = \u0026#34;Fail\u0026#34;; } } private void btnSql_Click(object sender, EventArgs e) { string sqlStr = this.txtSql.Text; try { MySqlCommand command = new MySqlCommand(sqlStr, conn); command.ExecuteNonQuery();\t// send Sql String;  } catch (Exception ex) { Console.WriteLine(ex); } } } } Description  Connection string 작성 시 주의사항  string connStr = string.Format(\u0026#34;Server={0};Port={1};Database={2};Uid={3};Pwd={4};\u0026#34;, this.txtServer.Text, \u0026#34;3306\u0026#34;, this.txtDB.Text, this.txtId.Text, this.txtPwd.Text); \r Database가 존재하지 않거나 추후 선택을 희망할 경우 공란으로 비워둠.  USE [database]sql command 로 연결 가능   string 수준을 잘 지킬 것.  \r\r SqlCommand Excute  MySqlCommand command = new MySqlCommand(sqlStr, conn); command.ExecuteNonQuery();\t// send Sql String; \r ExecuteNonQuery : 반영된 행 수를 반환하는 메서드  \r\rSql Command   Common  CREATE DATABASE mydb; -- mydb 데이터베이스 생성 USE mydb; -- 기본 데이터베이스로 mydb를 지정 CREATE TABLE mytable ( id INT PRIMARY KEY, name VARCHAR(20) ); -- mytable 테이블 생성 INSERT INTO mytable VALUES ( 1, \u0026#39;Will\u0026#39; ); -- 데이터 입력 INSERT INTO mytable VALUES ( 2, \u0026#39;Marry\u0026#39; ); INSERT INTO mytable VALUES ( 3, \u0026#39;Dean\u0026#39; ); SELECT id, name FROM mytable WHERE id = 1; UPDATE mytable SET name = \u0026#39;Willy\u0026#39; WHERE id = 1; SELECT id, name FROM mytable; DELETE FROM mytable WHERE id = 1; SELECT id, name FROM mytable; DROP DATABASE mydb; SELECT count(1) from mytable; gives the number of records in the table  Complex  SELECT * FROM user WHERE ((id \u0026lt; 200 AND id \u0026gt; 100) OR (id \u0026gt; 900000)) ORDER BY id DESC; \rSummary  Reference Link\n기본 SQL 문장\nSQL 쿼리 기본\n\r"
},
{
	"uri": "https://nocturover.github.io/windows/installation/",
	"title": "Installation",
	"tags": [],
	"description": "",
	"content": "Overview  windows10 기반 필수 설치 프로그램 및 setting 리스트\n\rInstallation List   환경변수 등록  set PATH=%PATH%;C:\\Program Files (x86)\\Notepad++ \rSystemLenovo Driver\ncmder\ncd c:\\cmder \n-\rProgrammingVisual Studio \u0026amp; Code\nalias vs=devenv git\nssh-keygen -t ed25519 -C \u0026#34;email@gmail.com\u0026#34; notepad++\nalias npp=start notepad++ Python\nhugo\nalias dir_hugo=cd c:\\[user]\\Programs\\hugo MariaDB\n​\t- MySql.Data Assembly\n-\rUtilsVLC\n7-zip\nchrome\njcpicker\n-\r\rSettings    ctrl-Fn key swap : In BIOS (Lenovo)\n  ctrl-Capslock key swap : In regedit / ref\n----- [add new regedit code] ----- Windows Registry Editor Version 5.00 [HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Control\\Keyboard Layout] \u0026#34;Scancode Map\u0026#34;=hex:00,00,00,00,00,00,00,00,02,00,00,00,1d,00,3a,00,00,00,00,00 ----- [reset regedit] ----- Windows Registry Editor Version 5.00 [HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Control\\Keyboard Layout] \u0026#34;Scancode Map\u0026#34;=-   "
},
{
	"uri": "https://nocturover.github.io/daily/01_%EC%84%A0%ED%83%9D%EA%B3%BC_%EC%A7%91%EC%A4%91/",
	"title": "01. 선택과 집중",
	"tags": [],
	"description": "",
	"content": "1\n모든 선택에는 에너지가 소모되더라도 객관화가 필요하다.\n여기서 말하는 객관화는 자기 객관화를 의미하는데, 자신의 능력 정도를 평가하는 방식부터 현재 하려는 행동의 방향성까지 모두 생각이 닿을 수 있는 끝자락까지는 수행하는 것이 옳다.\n이런 방식이 반드시 옳은 선택을 부여하는 것은 아니지만 닥친 상황에서의 최선의 선택을 할 수 있게끔 방향성을 제시해주고 또 다른 루트를 열어주는 역할을 한다.\n사소한 코드 구현 방식부터 일상생활에 모두 녹여야할 가치가 있다.\n\r2\n단축키 / 커맨드는 극한의 생산성을 요하는 프로가 아니더라도 필수적인 덕목이자 행동양식이라고 생각한다.\n마우스를 해당 지점에 이동하여 여러번 자식 리스트에 접속하여 특정 기능을 사용하는 노력을 거치는 것 보단 하나의 단축키에 의미를 부여하는 방식을 통해 암기하고 사용하는 것이 더욱 효율적이다. 치매 예방에 도움이 될지도 모른다.\n\r3\n정형화된 방식을 고수하는 것은 자신의 패턴 습관을 만들어 시간을 단축하는데 도움이 된다.\n사회는 시스템 내에서 돌아간다. 정확히는 알고리즘에 의해 동작하는 세상에 살아가고 있다고 생각한다. 시스템을 최초로 구현하는 비상한 사람들의 사고패턴 (= 하위 알고리즘 )을 그들의 입장에서 사고하는 훈련은 자신만의 커스텀 패턴을 제작하는 데 아이디어를 제공받을 수 있다.\n패턴화의 주어는 대단히 큰 시스템을 구축하는 것에서부터 최소 단위의 알고리즘을 구현하는 것도 포함된다.\n가령 naming convention을 무엇으로 택할지도 고려사항이 될 수 있는데, 파스칼 방식도 하나의 패턴화된 공식이라고 볼 수 있겠다.\n생산성 측면에서는 깊은 사고를 보다 낮은 개념에서 높은 개념으로 그륩화하고 자동화함으로써 에너지 사용을 줄일 수 있다고 생각한다.\n\r4\n시간관리는 자신에게 맞는 방식이 존재한다.\n"
},
{
	"uri": "https://nocturover.github.io/git/command/",
	"title": "Command",
	"tags": [],
	"description": "",
	"content": "Common command  Basic 로컬 저장소 파일 추가\ngit add [file] // or . (means all files) 로컬에 저장된 파일의 comment 추가\ngit commit -m \u0026#34;[comments]\u0026#34; 원격 저장소에 등록된 repository로 로컬 저장소 내 파일 업로드\ngit push [reopository] [name] 원격 저장소의 파일 로컬 저장소에 적재\ngit pull [reopository] 원격 저장소의 파일 복사\ngit clone --recursive [repository]\t// --recursive: with submodules. 원격 저장소 리스트 관리\ngit remote -v\t// registed remote list. git remote add [repository] git remote delete [repository] 로컬 or 원격 저장소 branch 리스트 관리\ngit branch -v // created branch list. git branch [name] git checkout [branchName] git switch [branchName] \rsubmodule :: git 내부 git Add submodule\ngit submodule add [git@github.com:userID/ProjectNm] [location] update - .gitmodules 파일 필수 :: recursive - 모든 submodules 적재\ngit submodule update --init --recursive \r"
},
{
	"uri": "https://nocturover.github.io/windows/cmder/command/",
	"title": "Command",
	"tags": [],
	"description": "Windows-cmder-command",
	"content": "\rEnvironment variable  cmder에서 단축코드를 타이핑해서 원하는 어플리케이션을 실행하기 위해서는 우선적으로 환경변수등록이 되어야 한다.\n시스템 환경 변수 편집 - 시스템 환경 변수 - path항목의 편집을 누르고 원하는 .exe파일이 존재하는 폴더를 추가해주면 된다.\n나의 경우 vscode / vs / typora / npp 등을 등록하여 사용 중이다.\n\rKeyboard Shortcuts  Tab manipulation   Ctrl + `  : Global Summon from taskbar\n  Win + Alt + p : Preferences (Or right click on title bar)\n  Ctrl + t : New tab dialog (maybe you want to open cmd as admin?)\n  Ctrl + w : Close tab\n  ⭐⭐ Shift + Alt + number : Fast new tab:\n 1. CMD 2. PowerShell    Shell  Ctrl + Alt + u : Traverse up in directory structure (lovely feature!) \r⭐⭐⭐ Ctrl + r : History search  \rCommon command  set path :: 환경 변수 설정 환경 변수 path 를 지정하여 cmd에서 바로 실행 환경 구축\nset path =%path%;[경로];\t// temporary setx path \u0026#34;%PATH%[경로]\u0026#34;\t// permanent Alias :: 별칭 지정 명령어를 통해 접근하는 실행파일이나 명령어들의 별칭 지정\nalias [별칭]=[명령어]$* doskey [별칭]=[명령어]$* xcopy :: 파일/폴더 복사 rename 가능\nxcopy [대상] [목적지] start . :: 현재 폴더 탐색기 열기 explorer .  로 대체될 수 있다.\nstart [destination] start . // 현재 폴더 탐색기 실행 touch :: 파일 생성 touch [fileName1] [fileName2] [fileName3] del :: 파일 삭제 del [fileName] \r"
},
{
	"uri": "https://nocturover.github.io/insight/01_%EA%B8%B0%EB%A1%9D%EC%9D%98_%EC%9D%98%EB%AF%B8/",
	"title": "01. 기록의_의미",
	"tags": [],
	"description": "",
	"content": "Overview 기록이란 완결성을 지닌다.\n문장을 작성하기 위해서 추상적으로만 상상하던 내용의 보다 세심한 구체화가 요구되는 작업이다. 하여 작업의 결과물이 도출되었을 때는 추상적 이미지의 한계성을 다시금 상기시켜주는 영향도 미친다.\n내가 기록을 시작한 것은 복잡한 생각들에 대한 정리가 필요할 때, 내려놓는다는 행위를 취함으로써 일부 부담을 절하하려는 목적이 강했었다.\n기록을 하기와 그만두기를 반복하며 얻었던 각 개별 장점에 대해서 기술해보고자 한다.\n\rFeatures 1. Advantage  기억공간 확장 재귀성 이해도\n역시 빼놓을 수 없는 기록의 장점은 기억공간의 확장이다.\n교육을 듣거나 학습을 하면서 얻어지는 지식들은 장기기억의 공간을 차지하기 위해서 일종의 알고리즘이 필요하다. 이를테면 감정적인 연결점이나 단어를 이미지화 하는 등 이그나이터가 될 수 있는 오브젝트를 생성하고 연결하는 과정이 필요하다는 것이다. 내가 느끼는 기억법이라는 것은 생성과 연결이라는 짧은 구절로 정리할 수 있겠다.\n이런 과정은 시냅스의 연결을 강화시키는 일종의 기억강화라는 특성을 오브젝트에 부여할 수 있지만, 에너지가 소모된다는 점은 부정할 수 없을 것이다. 특히 기억의 착각을 유발시킬 수 있는 Anchoring, 확증 편향 등 다양한 심리적 인지 편향들을 과거의 경험에 비추어 생각해본다면 결코 신뢰도가 높은 방법으로 평가되지는 않는 듯 하다.\n이에 대한 대체 방법으로 기록이 존재한다. 글을 작성함으로써 얻게되는 일부 심리적 부담의 절하와 색인기능을 활용할 수 있다는 점과 기록을 체계적으로 정리해두었다면 쓸만한 자신만의 커스텀 위키가 완성될 수도 있지 않을까.\n또한 기록은 단 한 번의 일회성에 그치지 않는다.\n글의 탈고를 마치면 급하지 않다면 퇴고를 진행하는 것이 일반적인 수순이다. 그것이 프라이빗한 플랫폼이나 스마트폰의 메모어플리케이션을 활용하여 작성하는 것이 아니라면 다시 한 번 글을 살펴보면서 문맥상의 이상은 없는지, 논리성이 부족하거나 생략된 문단은 없는지 살펴보며 보완할 수 있다. 그리고 이 과정에서 장기기억화로 넘어가는 생성자의 선명도를 높여줄 수 도 있을 것 이다.\n블로그의 아티클과 같이 완결성을 지닌 하나의 글은 단 한 번의 사용으로 그치지 않고 이후 일부 내용의 상기나 내용의 추가를 위해 리다이렉트 하는 경우가 존재한다. 결국 한 번 체계적으로 정리된 글은 추상적인 것이 아닌 명확한 개념으로 영원히 남을 수 있다.\n체계성은 깊은 이해를 부여한다.\n체계적인 글을 완성시킨다는 것은 개념에 대한 온전한 의미를 전제로 한다. 그렇지 못한 상태에서 생성되는 글은 저수준의 내용에 대해서 생략이나 연계성 부족으로 이어질 수 밖에 없다. 알지 못하는 오브젝트에 대해서 검색을 하고 타인이 작성한 글을 읽고 개인의 축적된 경험과 시각화 능력을 기반으로 재가공된 새로운 오브젝트의 가지들은 하나의 트리를 만들 수 있다.\n이와 같은 학과 습의 과정에서 얻어지는 개념이해는 또 다시 재귀적으로 축적된 지식과 경험의 산물로 남아 다른 개념의 이해를 도울 수 있다.\n\r2. Disadvantage  그러나 아쉽게도 기록을 위한 훈련이 되어있지 않은 상황에서는 패턴화를 위한 에너지 소모가 동반된다. 그리고 패턴화가 되어 있더라도 생각으로 정리하여 결론을 도출해내는 과정보다 현저히 느린 속도로 진행된다.\n기록을 위한 환경 또한 갖춰져야 한다. 펜과 노트 키보드와 어플리케이션이 없다면 어떤 기록도 진행될 수 없다.\n어찌보면 비효율적인 행동 선택으로 비춰질지도 모르겠나, 복잡성이 증대되는 오브젝트일 수록 기록에 대한 필요도는 함께 증가한다. 철학적 사고를 포함하여 오브젝트 개념의 정리와 파생될 수 있는 2차 창작물들의 진척도나 문제 해결 등을 기술하는 것도 적절한 적용이라고 생각한다.\n\rMethodology  체계적 정리를 위한 목록 생성과 일반 내용 추상화\n책에는 목차가 존재한다. 글을 작성하는 의미와 목적에 대한 뚜렷한 개념이 존재한다면 이 목차의 필요성을 빼놓을 수 없을 것이다. 글은 나의 이해를 돕고 정리를 통해 최총단에서 추구해야할 창작물의 생성을 위함인데, 마구잡이의 글은 단지 추상적인 내용을 추상적으로 옮겨적는 단순 반복 행위일 뿐이다.\n추가할 내용목록은 패턴화 / 가벼운 글, 작은 내용도 패턴만은 준수\n   \r정말 필요한 내용인가?\n추가할 내용퇴고 / 곁다리 삭제 / 그래서?\n   \r플랫폼\n추가할 내용*개인 블로그 / notion / ios-미리알림 *\n   \r\rSummary  "
},
{
	"uri": "https://nocturover.github.io/git/troubleshooting/00_crlf_trouble/",
	"title": "01. CRLF TROUBLE",
	"tags": [],
	"description": "",
	"content": " 1. Trouble  CRLF ERR clone / push 등의 단계에서 CRLF(Carriage Return Line Feed)와 관련된 트러블이 발생한다.\n\r2. Shooting  git config --global core.autocrlf true 각 계정에 remote add로 등록된 해당 레퍼지토리의 config 를 변경함으로써 해결가능하다.\n\r3. Summary  Reference\nCRLF 차이점과 해결법\n\r"
},
{
	"uri": "https://nocturover.github.io/web/hugo/01_custom_theme/",
	"title": "01. Custom Theme",
	"tags": [],
	"description": "",
	"content": "Overview  hugo를 이용하여 생성된 static site 는\ngit submodule add ~.git themes/~~ 커맨드를 이용하여 적재한 테마 파일의 모든 레이아웃을 따르게 되어있다.\n\r1. 개념  기본 레이아웃을 변경시키기 위해서는 원본 테마 폴더 내에 존재하는 layouts의 각 html을 수정해주거나 overriding을 위해 상위 폴더에 layouts를 생성하여 각 필요한 html을 수정해주는 방법이 존재한다.\n\r2. 적용범위  a. 사이트 상태 반환 hugo는 Go 언어와 html의 조합을 이용하여 동적인 코드 조합이 가능하기 때문에 이 사이트 좌측 메뉴바에서 볼 수 있듯 각 Section에 포함된 게시글의 전체개수를 반환하여 string 형태로 접미어에 붙이는 것도 가능하다.\n\rb. 스타일의 변환 또한 기본 폰트의 변경과 footer , header 의 내용에 버튼, 이미지 등의 컨트롤을 삽입하는 것도 가능하다.\n\nCustomizing  커스터마이징에 앞서 ~/themes/테마명/Layouts의 구조를 살펴보도록 하자.\n├─partials │ body-article-content.html │ body-article-sidepage.html │ body-footer.html │ body-header.html │ body-sidebar.html │ head.html │ html-head-vendor.html │ html-head.html │ _mdinclude.html │ _menu.html │ _next-prev-page.html │ _pagination.html │ _skwad-footer.html │ _skwad-header.html │ ├─raw │ section.html │ single.html │ ├─shortcodes │ │ alert.html │ │ emoji.html ~ 생략 ~ 현재 이 사이트는 vjeantet/hugo-theme-docport 테마가 적용되어 있는데, 해당 구성의 partial에는 사이트 화면의 구성요소들이 포함되어 있다.\n그 중 _menu.html 은 좌측의 메뉴바 구현에 대한 코드를 담고 있다.\n\r1. Counting Section pages  각 섹션(_index.md를 포함하고 있는 각 폴더)의 총 페이지 수는 다음 코드의 반환값으로 카운트한다.\n\u0026lt;!-- 디렉토리 이름과 비교하여 count를 반환 --\u0026gt; {{- $dirName :=substr .File.Dir 0 -1}} {{- $sectionCnt := len (where .Site.AllPages \u0026#34;Section\u0026#34; \u0026#34;==\u0026#34; $dirName) }} \u0026lt;a href=\u0026#34;{{ .RelPermalink}}\u0026#34;\u0026gt;({{$sectionCnt}})\u0026amp;nbsp;{{safeHTML .Params.Pre}}{{$menuTitle}}{{safeHTML .Params.Post}}\u0026lt;/a\u0026gt; .site.AllPages 는 Page(#총개수)를 반환하며 len은 각 변수가 가지고 있는 개수를 반환한다.\nwhere은 조건문으로 사용되며 where #범위 #비교1 \u0026quot;=\u0026quot; #비교2 각 섹션의 이름이 해당 디렉토리의 폴더명과 일치하는 pages의 개수를 반환하는 코드가 된다.\n코드의 첫 줄의 $dirName의 문자열 일부를 반환[0:-1]시키는 이유는 .File.Dir 의 반환값이 #폴더명/로 \u0026quot;/\u0026quot; 접두어가 함께 따라오기 때문이다.\n.Title이 아닌 디렉토리의 이름을 비교대상으로 사용하는 이유는 각 섹션이 보유하는 고유한 값은 폴더명이기 때문이다.\n\r2. Change Font  ~themes\\docport\\assets\\sass\\main.scss 파일은 scss파일로 html에서 표현되는 스타일을 구현한다.\n.Site.Params.color_main (config.toml설정 일부)으로부터 전체 테마의 색상을 적용하거나 body,a 등 각 태그의 스타일을 세부적으로 설정한다.\nfont-family: \u0026#34;Montserrat\u0026#34;,\u0026#34;나눔스퀘어\u0026#34;; font-weight: 400; line-height: 1.5; 의 내용을 수정하면, 본문과 같이 영문만 지원되는 Monterrat과 나눔스퀘어가 동시 적용된다.\n\n3. Summary html내부에 Go언어를 접목시킨다는 의미는 보다 넓은 확장성을 가져올 수 있는 이점이 있다. 특히 _index.md 시작부에 작성하는 Front matter의 간단한 변수 입력만으로도 해당 내용을 불러와 실제 마크다운 내용에 쉽게 적용시킬 수 있는 사용자 편의를 제공한다.\n이번 아티클에서 다룬 함수를 포함한 다양한 사용예시와 목록은 아래의 링크를 참조하자.\nHugo Link\nHugo Templates\nHugo Functions\n\r"
},
{
	"uri": "https://nocturover.github.io/csharp/winform/02_event/",
	"title": "02. C# Event",
	"tags": [],
	"description": "",
	"content": "Overview  C# 문법 Event의 실사용 예제 기술\n\nEvent  개념   event 단어 자체의 의미로 접근\n 특정 행위, 상황의 발생에 따른 신호 전달 신호에 따른 정해진 행위 수행    Delgate (대리자) 는 메서드 자체를 지니고 있는 행위 대리자\n  Eventhandler는 행위 대리자로 선언되며,\n 행위 대리자인 Eventhandler에 행위(Method)를 추가 혹은 제거하여 하나의 신호 발생원에 대응하여 수행 object /EventArgs 는 이벤트 신호원으로부터 개별적 특성을 정의 Lambda식을 사용하여 간결하게 메서드를 Eventhandler에 담을 수 있음.    Example\n 각 캡슐화된 객체의 연동을 수행 시 개별 변동 사항에 대한 타 객체 업데이트 수행 시  Form에서 Button 클릭 시 다크모드 전환 (전체 폼 업데이트 필요)  (on_event)Form button Click =\u0026gt; (Eventhandler)((Method)다크모드 전환)     SQL 내 연결 Disconnected 시 Status Ramp의 전환 및 재연결 필요    \rcode MariaDB.cs using System; using System.Collections.Generic; using System.Data; using System.Windows.Forms; using MySql.Data.MySqlClient; // ver 1.1 namespace TEST_DB { public class DBEventArgs { public string message; public ConnectionState status; public string database; } delegate void DBEventHandler(object sender, DBEventArgs e); class MariaDB { public event DBEventHandler On_EventStatusChanged;\t// sql conn 변화에 따른 이벤트 발생  ~~생략~~ public void connectDBMS(string server, string port, string db, string id, string pwd) { this.server = server; this.port = port; this.db = db; this.id = id; this.pwd = pwd; this.connString = string.Format(\u0026#34;Server={0};Port={1};Database={2};Uid={3};Pwd={4};\u0026#34;, this.server, this.port, this.db, this.id, this.pwd); this.conn = new MySqlConnection(connString); On_EventStatusChanged(this, new DBEventArgs(){database=this.db, status=ConnectionState.Closed});\t// 상태 변화에 따른 이벤트 신호 발생 1  } public void disconnectDBMS() { this.conn = null; On_EventStatusChanged(this, new DBEventArgs(){database=this.db, status=ConnectionState.Broken});\t// 상태 변화에 따른 이벤트 신호 발생 2  } } } MainForm namespace TEST_FORM { public partial class ChildConnectionForm : Form { ~~생략~~ private void ChildFormLoad(object sender, EventArgs e) { DB.mariaDB.On_EventStatusChanged += new DBEventHandler(DBEvent_ChangedStatus); // 등록  } private void ChildFormClosed(object sender, FormClosedEventArgs e) { DB.mariaDB.On_EventStatusChanged -= new DBEventHandler(DBEvent_ChangedStatus);\t// 해제  } private void DBEvent_ChangedStatus(object sender, DBEventArgs e) {\t// sender는 MariaDB.cs의 인수인 해당 클래스 자체가 전달; \tchangeStatusRamp(color=\u0026#34;red\u0026#34;); connDB(\u0026#34;127.0.0.1\u0026#34;); Log.Write(\u0026#34;[*] Changed DB Conn status. {0} {1}\u0026#34;, e.stauts.ToString(), e.database); } } } \r\rTroubleshooting  Event발생 시 object null 오류\r Event발생 시 행위를 수행하는 자가 존재하지 않는 경우  += new Eventhandler(sender, e) 로 발생 되기 전 등록(=Form Load Or 객체 생성 시)    \r\rSummary  Reference Link\r\r"
},
{
	"uri": "https://nocturover.github.io/csharp/db/02_sql_%EB%AC%B8%EB%B2%95/",
	"title": "02. SQL 문법",
	"tags": [],
	"description": "",
	"content": "Overview  SQL에서 사용되는 문법의 정리\n\rStructure :: SQL  DDL :: Data Defination Language  CREATE ALTER DROP  DML :: Data Manipulation Language  SELECT = query statement DELETE INSERT UPDATE  DCL :: Data Control Language  GRANT REVOKE  \rCommand  CREATE CREATE DATABASE `tastdb`; CREATE TABLE `testtable` (code INT(6) UNSIGNED ZEROFILL NOT NULL PRIMARY KEY , name VARCHAR(20) NOT NULL, lastUpdate DATETIME NOT NULL);  SQl Command 전송으로 테이블을 직접 생성할 시 각 데이터 유형 생성 방법 (순서 유의)  UNSIGNED - 부호 없음 ZEROFILL - 0으로 채움 NOT NULL - Null 값 없음 PRIMARY KEY - 기본 키 DEFAULT [val] - 기본 값    INSERT INSERT INTO testDB.testTable VALUES(12345, \u0026#34;sample\u0026#34;, \u0026#34;yyyy-MM-dd HH:mm:ss\u0026#34;);  데이터 형식 주의  WHERE WHERE age \u0026lt; 10; WHERE age BETWEEN 2 AND 20; WHERE age IN (10, 20 ); // ??? WHERE age EXIST;\t// ??? WHERE age LIKE; WHERE age IS NULL; / IS NOT NULL; \rTroubleshooting  UTF-8\n한글 깨짐 (\u0026quot;????\u0026quot;) 현상\n\r \r⭐ UTF8 미설정 오류  MariaDB msi 설치 시 utf8 기본 설정 체크박스 체크 Or, Table 옵션에서 utf8mb3_general_ci 선택    C# Escape string\nSQL commnad 전송 시 문법 Invalid Err\n\r  \r⭐ ⭐ 각 필드의 format에 맞지 않는 오류\n  C#에서 만들어낸 query string은 sql에서 해석시 escape string화 하기 때문에 VARCHAR속성 등은 내부 quote '{0}' 설정을 해주어야 함\n  string queryString = string.Format(\u0026#34;INSERT INTO testDB.testTable VALUES({0}, \u0026#39;{1}\u0026#39;, \u0026#39;{2}\u0026#39;)\u0026#34;, 12345, \u0026#34;sample\u0026#34;, DateTime.Now.ToString(\u0026#34;yyyy-MM-dd HH:mm:ss\u0026#34;));     lowercase TABLE name\nSQL commnad 전송 시 명확한 Table name\n\r \r⭐ table 생성 시 대문자로 정의하더라도 소문자로 reformating 수행 (주의 요)  \rSummary  Reference Link\nSQL Tutorial \u0026amp; Training Documentation\n⭐⭐⭐ SQL 문법 정리\n⭐⭐⭐ Most efficient way to insert Rows into MySQL Database\n\r"
},
{
	"uri": "https://nocturover.github.io/web/hugo/02_favicon/",
	"title": "02. FAVICON",
	"tags": [],
	"description": "",
	"content": "Overview  웹페이지의 대표 아이콘인 favicon의 설정 방법을 기술\n\r1. 적용  favicon ├─static │ ├─admin │ │ └─shortcode │ ├─css │ ├─images │ ├─js │ └─vendor │ ├─auto-complete │ └─lunr static/images에 favicon.png 이름으로 로고 파일을 저장한다.\nlayouts/partials/html-head.html 파일에 사이트 title과 link가 작성되어 있다.\n\u0026lt;title\u0026gt;{{ .Title }} :: {{ .Site.Title }}\u0026lt;/title\u0026gt; \u0026lt;link rel=\u0026#34;shortcut icon\u0026#34; href=\u0026#39;{{\u0026#34;images/favicon.png\u0026#34; | relURL}}\u0026#39; type=\u0026#34;image/x-icon\u0026#34; /\u0026gt; \rlogo layouts/partials/body-header.html 파일에 div태그 내부에 상부 헤더 title이 작성되어 있다.\na태그를 새로 생성하여 아래와 같이 작성한다.\n\u0026lt;a href=\u0026#34;{{ .Site.BaseURL }}\u0026#34;\u0026gt; \u0026lt;img src=\u0026#39;/images/favicon.png\u0026#39; style=\u0026#34;width:20px;height:20px;margin-top:3px;\u0026#34;/\u0026gt; \u0026lt;/a\u0026gt; \u0026lt;div\u0026gt; {{- $defaultheader := printf \u0026#34;\u0026lt;a class=\u0026#39;baselink\u0026#39; href=\u0026#39;%s\u0026#39;\u0026gt;%s\u0026lt;/a\u0026gt;\u0026#34; .Site.BaseURL .Site.Title -}} {{- partial \u0026#34;_mdinclude.html\u0026#34; (dict \u0026#34;name\u0026#34; \u0026#34;header\u0026#34; \u0026#34;context\u0026#34; . \u0026#34;tip\u0026#34; $defaultheader ) -}} \u0026lt;/div\u0026gt; \r3. Summary  상대경로를 go 방식이나 html방식으로 작성하여 href / src 등을 작성할 수 있다.\nimg의 width / height로 적용했을 때 height가 적용되지 않는 오류가 있어서 style 속성으로 대신 적용하였다. margin을 이용해 정렬을 할 수 있다.\nHugo Link\nHugo Templates\nHugo Functions\n\r"
},
{
	"uri": "https://nocturover.github.io/git/troubleshooting/02_ssh/",
	"title": "02. SSH",
	"tags": [],
	"description": "",
	"content": "1. Trouble  SSH REGISTER ERR clone / push Pirvate repo의 접근 권한이 부여되지 않아 발생하는 에러.\n\r2. Shooting  ssh-keygen -t rsa -b 4096 -C \u0026#34;[email]@google.com\u0026#34;\t// rsa encrypt 방식의 4096 bit 암호 생성 start notepad++ c:\\users\\[user]\\.ssh\\id_rsa.pub\t// copy and paste.\tgit command ssh-keygen으로 ssh를 생성하여 github.com 각 계정의 settings에서 해당 PC의 ssh 키를 수동으로 등록해준다.\n\r3. Summary  Reference\nSSH key 생성하고 GitHub에 등록\n\r"
},
{
	"uri": "https://nocturover.github.io/daily/02_%EC%88%99%EB%8B%AC%EA%B3%BC_%EC%9D%BC%EC%B2%98%EB%A6%AC/",
	"title": "02. 숙달과 일처리",
	"tags": [],
	"description": "",
	"content": "1\n어떤 일이든 메뉴얼 / 경험사례가 존재하지 않는 온전히 새로운 일을 시도하는 것이 아니라면, 어느정도 옳바른 방식의 접근법을 알고 시간을 투자하면 궤도에 오르는 것이 가능하다.\n그것은 학습하는 과정 자체가 될 수도 있으며 행동자체를 의미하기도 한다.\n\r2\n해야할 과제가 주어졌을 때 무작정 시작하는 방법은 무식할 수 있지만,\n접근법을 메타인지적 관점에서 고려하고 빠르게 처리하려는 자세는 심적 부담을 줄여주는 동시에 돌아볼 수 있는 여유 시간을 부여하기 때문에 언제나 빠른 접근은 나은 결과를 창출할 수 있는 것 같다.\n이전 나의 일처리 방식은 게을렀고 그로 인해 얻을 수 있던 것은 합리화와 자기 방어 기법의 늘어난 가짓수 뿐 이었다.\n어리석게도 그런 방식을 사용하고 있자면 마음의 위안을 미리 얻는 듯한 느낌을 받았다고 생각했지만 결코 길게 늘어진 꼬리를 지닌 일처리 방식을 사용했었던 점에서 후회가 남는다.\n\r3\n결국엔 효율성인가?\n나의 가치관은 생산 / 효율 / 몰입 과 같은 단어들이 자주 등장한다. 이 단어들은 내가 나아가고자 하는 방향을 제시하는 인터페이스와 같은 역할을 하는데, 이렇다 하여 내가 훌륭한 고 생산자를 의미하지는 않는다.\n단순히 나는 스스로에 대한 판단 기준이 점차 높아지기를 바라며, 다가오는 불안감에 대해 긍정 피드백이 될 수 있는 선순환 알고리즘을 유지해 나가는 것을 바랄 뿐이다.\n\r4\n예년에 비해 혼잣말이 늘었다는 것을 실감한다.\n이동하는 차 안에서 대게 혼자 생각하는 하나의 주제에 대해 전달자가 되어 이야기하는 것을 즐기는 듯한 모습을 보인다.\n\r5\nlenovo thinkpad T15 제품을 구매했다.\n어찌보면 충동구매였는데, 역시나 변명거리는 언제나 차고 넘쳤다.\n현재 사용하고 있는 Thinkpad e450은 이미 9년이라는 세월의 풍파를 맞고도 멀쩡히 현 사이트를 퍼블리싱 할 수 있을 정도로 훌륭히 일을 잘 해내었다. 팔아도 중고가가 25만원 밖에 되지 않아 상시 데이터베이스 포트를 열어두는 용도정도로 사용할 듯 싶다.\nThinkpad는 사용한 사람들은 알듯 쫀득한 키감과 반사되지 않는 스크린, 단단한 내구성 등 훌륭한 장점들이 있다. 원래는 extreme gen4를 구매하고 싶었으나 주머니 사정이 넉넉치 않아 일단 T시리즈 중 용도보다 살짝 오버되는 스펙을 선택했다.\nextreme이 과하기도 했고\u0026hellip;\n한 가지 아쉬운 점은 텐키리스가 아니라는 점.. 현재 사용 중인 키보드도 노트북도 모두 텐키리스를 사용 중이고 이게 더 익숙하니 편하다. 회사에서 사용하는 기다란 풀배열의 키보드의 텐키는 장식일 뿐이다.\n텐키가 생기면서 키보드의 전체 자판이 좌측으로 향하게 되고 트랙패드도 스페이스바의 중간부에 위치하기는 하지만 스크린과 중간 정렬이 되지 않기에 조금은 아쉽다. 텐키리스 모바일 워크스테이션의 가격은 모닝 중고 한 대 값이니, 적절히 타협한 선택이었다 생각한다.\n앞으로 10년 후에도 Thinkpad를 재구매하지 않을까.\n"
},
{
	"uri": "https://nocturover.github.io/insight/",
	"title": "Insight",
	"tags": [],
	"description": "Insight",
	"content": "Overview  이 곳은 아이디어 및 인사이트를 담아두는 Archive 입니다.\n\rInsight Children List  \r01. 기록의_의미\rOverview 기록이란 완결성을 지닌다. 문장을 작성하기 위해서 추상적으로만 상상하던 내용의 보다 세심한 구체화가 요구되는 작업이다. 하여 작업의 결과물이 도출되었을 때는 추상적 이미지의 한계성을 다시금 상기시켜주는 영향도 미친다. 내가 기록을 시작한 것은 복잡한 생각들에 대한 정리가 필요할 때, 내려놓는다는 행위를 취함으로써 일부 부담을 절하하려는 목적이 강했었다. 기록을 하기와 그만두기를 반복하며 얻었던 각 개별 장점에 대해서 기술해보고자 한다. Features 1. Advantage 기억공간 확장 재귀성 이해도 역시 빼놓을 수 없는 기록의 장점은 기억공간의 확장이다.\n\r\r"
},
{
	"uri": "https://nocturover.github.io/csharp/winform/03_winform_thread/",
	"title": "03. Thread/Invoke/BeginInvoke",
	"tags": [],
	"description": "",
	"content": "Overview  WinForm에서 멀티 쓰레딩 환경을 구성하는 방법을 기술\n\r\rWinForm Environment  개념   WinForm은 기본적으로 main() 메서드 내에서 Application.Run(new Form1())을 수행하게 되고 따라서 UI Thread라고 명명되는 MainThread환경에서 동작되게 된다.\n  이는 WinForm에서 컨트롤을 업데이트 하는 과정을 포함하여 모든 코드 동작이 MainThread 내에서 일어남을 의미하며, 따라서 다른 쓰레드에서 접근하여 컨트롤을 업데이트하는 것을 금지한다. ( Throw Cross-Thread Exception )\n  이러한 이유로 새로운 Thread를 생성하여 무거운 작업(DB Select / FileStream)을 수행한 후에 결과 Form에 반영하기 위한 Thread.Join() 과정에서 또한 Form의 Wait과정을 거쳐야하기 때문에 유저의 유동적 활동을 제한한다.\n  따라서 Form상속 클래스 내 인스턴스를 지칭하는 this.의 컨트롤 권한을 Delegate에 할당된 메서드에 전달하여 컨트롤을 타 Thread환경에서 연결되게 만들어줄 수 있는 Invoke 와 BeginInvoke를 사용한다.\n  \r(Thread + BeginInvoke) Code  일반적인 Thread환경을 구축하기 위한 방법으로 새로운 Thread를 생성하고 Method를 반환값 여부에 따라 Action Func 무명메서드를 전달하여 UI의 간섭을 배제한 채 작업을 수행한다.  반환값을 소유하는 Func Delegate를 사용할 경우, .EndInvoke()로 Thread작업의 종료를 대기하는 코드를 추가하여야 한다.   다음 코드는 버튼을 클릭하였을 때, .csv확장자 파일을 읽어들여 ComboBox Form control에 반영한다.  private void btnUpdateList_Click(object sneder, EventArgs e) { Thread T_ComboUpdate = new Thread(new ThreadStart(UpdateComboBox)); T_ComboUpdate.Start(); void UpdateComboBox() { FileStream fs = new FileStream(@\u0026#34;UserList.csv\u0026#34;, FileMode.Open); StreamReader sr = new StreamReader(fs, Encoding.UTF8); while (sr.Peek() \u0026gt;= 0)\t// 다음 read가 존재할 때,  { string row = sr.ReadLine(); this.BeginInvoke(new Action(() =\u0026gt; { this.cboUserList.Items.AddRange(row.Split(\u0026#34;\\r\\n\u0026#34;));\t// 문자개행으로 구분, 한줄 씩 받아옴.  })); } this.cboUserList.SelectedIndex = 0; sr.Close(); fs.Close(); } } \rInvoke vs BeginInvoke   단어의 구성에서 유추할 수 있듯이 BeginInvoke는 비동기 처리를 의미한다.\n  위 예시 코드에서는 비동기로 작동하는 Thread 내 BeginInvoke 를 사용한 것을 볼 수 있는데, 파일의 정보가 적기 때문에 Invoke를 사용하더라도 Overhead의 큰 차이 없이 또 유저측면의 Main UI 거동에도 간섭없이 동일한 결과가 표출되는 것으로 보여진다.\n  그러나, Invoke vs BeginInvoke 예시 아티클에서 제시된 예시처럼 Invoke를 사용하게 되면 UI의 동작에 영향을 받기 때문에 만약 또다른 Invoke 메서드가 동시에 사용될 경우 메시지 큐에서 순차적으로 처리하게 된다.\n  따라서 Control의 딜레이 없는 결과를 얻고 싶다면, BeginInvoke를 사용하는 것이 일반적인 경우에 부합한다.\n  [참고]  this.BeginInvoke 와 this.cboUserList.BeginInvoke 는 동일한 Form에서 파생되는 ThreadPool을 이용하기 때문에 차이가 없다.  \r\r(Task.Run + BeginInvoke) Code private async void btnUpdateList_Click(object sneder, EventArgs e) { await Task.Run(new Action(UpdateComboBox)); this.lblResult.Text = \u0026#34;UserList Loaded\u0026#34; void UpdateComboBox() { FileStream fs = new FileStream(@\u0026#34;UserList.csv\u0026#34;, FileMode.Open); StreamReader sr = new StreamReader(fs, Encoding.UTF8); while (sr.Peek() \u0026gt;= 0)\t// 다음 read가 존재할 때,  { string row = sr.ReadLine(); this.BeginInvoke(new Action(() =\u0026gt; { this.cboUserList.Items.AddRange(row.Split(\u0026#34;\\r\\n\u0026#34;));\t// 문자개행으로 구분, 한줄 씩 받아옴.  })); } this.cboUserList.SelectedIndex = 0; sr.Close(); fs.Close(); } }  async / await 구문에 따라 버튼이 클릭되면, UpdateComboBox()가 Form이 아닌 새로운 ThreadPool에서 실행되고 완료되면 label Text를 업데이트한다.  \nTroubleshooting  Performance CheckList \r       \nSummary  Reference Link\nDifference between BeginInvoke and Thread.Start\nDoes Thread.Sleep affect the ThreadPool?\nVisual C#: Thread.Sleep vs. Task.Delay\n\r\r"
},
{
	"uri": "https://nocturover.github.io/web/hugo/03_shortcodes/",
	"title": "03. ShortCodes",
	"tags": [],
	"description": "",
	"content": "Overview  ShortCodes 생성과 활용\n\rCustom Shortcodes  생성 \u0026lt;span {{$count:=.Get \u0026#34;count\u0026#34; | default \u0026#34;1\u0026#34;}}\u0026gt;{{ $emoji:=( .Inner | emojify)}}{{ range $idx, $sequence := (seq $count) }}{{ $emoji }}{{ end }}\u0026lt;/spna\u0026gt;  Go / html / style-css / script-js 혼합 작성 가능 한 줄로 작  Parameter {{$count:=.Get \u0026#34;count\u0026#34; | default \u0026#34;1\u0026#34;}}  .Get 메서드 사용하여 $[var] := 문법으로 할당 default로 기본 값 설정  \rTroubleshooting  강제 개행 및 html 적용 불량\r short codes의 작성 구문이 여러줄 일 경우 그에 해당하는 강제개행이 이뤄짐  한 줄로 코드 formatting MarkDown파일 내 작성 시 {\u0026lt; [shortcode] \u0026gt;}} {\u0026lt; /[shortcode] \u0026gt;}} 꺽쇠 문자로 작성 - 혼합    parameter 할당 오류\r 파라미터 할당은 string형태로 하드 포메팅  count=\u0026quot;2\u0026quot;    \rSummary  Reference Link\nhugo Functions\n\r\r"
},
{
	"uri": "https://nocturover.github.io/csharp/db/03_sql_%EC%BA%A1%EC%8A%90%ED%99%94/",
	"title": "03. SQL 캡슐화",
	"tags": [],
	"description": "",
	"content": "Overview  MairaDB - C#의 연동 및 기타 메서드를 담는 클래스 생성\n\rArchitecture  목적 :: 캡슐화  DB의 사용방식을 최대한 독립시킴으로써 타 소스들과의 의존성을 줄임. 단, (단일적 \u0026amp;\u0026amp; 외부 사용 필수) 요소는 static 허용 처리 방식의 고수준화  디자인  Member - Property - Structure - Method - TestCase  \rWarning  한정자  한정자의 등장배경 개념에 따른 코드 스탠다드 정형화 필요.  private - 소스 코드 내에서만 Retrieving public - 인스턴스로 외부에서 적용될 때 static - global setting의 개념 (단일성 - singleton Design pattern)    Execute command  반환값에 따른 방법 적용  ExecuteScalar - 1개 요소 ExecuteReader - next/current 방식 ExecuteAdapter - fill in Dataset[Datatable]    MySqlConnection  conn 할당 후 conn.Open() conn.Close() 의 사용 패턴 주의 필요.  SQL service를 담당하는 mysqld.exe 서비스의 중지가 발생될 수 있음  Err - host err C:\\Program Files\\MariaDB 10.5\\bin\\mysqld.exe 파일 직접 실행 Or, service start mysqld 명령문 실행   각 Execute command 시점 전 후로 커넥션 제어 필요  using 문 사용 Or, 수동 Open() / Close() Or, Connection Pooling 방식 사용      \rTroubleshooting  \rCode  MariaDB.cs using System; using System.Collections.Generic; using System.Data; using System.Linq; using System.Text; using System.Threading.Tasks; using MySql.Data.MySqlClient; namespace UNIT_TEST_DB { class MariaDB { private MySqlConnection conn = null; private MySqlCommand command = null; private string connString; private string server; private int port; private string db; private string id; private string pwd; public MariaDB(string server, int port, string db, string id, string pwd) { this.server = server; this.port = port; this.db = db; this.id = id; this.pwd = pwd; this.connString = string.Format(\u0026#34;Server={0};Port={1};Database={2};Uid={3};Pwd={4};\u0026#34;, this.server, this.port.ToString(), this.db, this.id, this.pwd); this.conn = new MySqlConnection(connString); } ~MariaDB() { conn.Close(); conn.Dispose(); } public void connectDBMS() { try { if (conn == null) { conn = new MySqlConnection(connString); } if (conn.State == ConnectionState.Closed) { conn.Open(); } } catch (Exception connErr) { Console.WriteLine(\u0026#34;connErr : \u0026#34; + connErr); } } public void disconnectDBMS() { if (DBMSstate == ConnectionState.Open) { conn.Close(); } } public Array connInfo { get { return new String[] { this.server, this.port.ToString(), this.db, this.id, this.pwd }; } } public ConnectionState DBMSstate { get { return conn.State; } } public void setData(string queryString) { conn.Open(); command = new MySqlCommand(queryString, conn); try { command.ExecuteNonQuery(); } catch (MySqlException sqlSetErr) { Console.WriteLine(\u0026#34;sqlSetErr : \u0026#34; + sqlSetErr); } conn.Close(); } public DataSet getData_dataset(string queryString) { conn.Open(); DataSet ds = new DataSet(\u0026#34;mainSession\u0026#34;); command = new MySqlCommand(queryString, conn); using (MySqlDataAdapter adapter = new MySqlDataAdapter(command)) { adapter.Fill(ds, \u0026#34;userTable\u0026#34;); } conn.Close(); return ds; } public List\u0026lt;string\u0026gt; getData_list(string queryString) { conn.Open(); List\u0026lt;string\u0026gt; fieldNames = new List\u0026lt;string\u0026gt;(); List\u0026lt;string\u0026gt; datas = new List\u0026lt;string\u0026gt;(); try { command = new MySqlCommand(queryString, conn); using (MySqlDataReader reader = command.ExecuteReader()) { for (int fieldCnt = 0; fieldCnt \u0026lt; reader.FieldCount; fieldCnt++) { fieldNames.Add(reader.GetName(fieldCnt)); } while (reader.Read()) { for (int fieldCnt = 0; fieldCnt \u0026lt; reader.FieldCount; fieldCnt++) { datas.Add(reader[fieldCnt].ToString()); } } } } catch (MySqlException sqlGetErr) { Console.WriteLine(\u0026#34;sqlGetErr : \u0026#34; + sqlGetErr); } conn.Close(); return datas; } } } Description  2가지 Type 지원  public DataSet getData_dataset(string queryString){ return ds; } public List\u0026lt;string\u0026gt; getData_list(string queryString){ return datas; }  FieldCount를 이용한 column name 취득  fieldNames.Add(reader.GetName(fieldCnt));  FieldCount를 이용한 열 수에 따른 데이터 자동 반환  while (reader.Read()) { for (int fieldCnt = 0; fieldCnt \u0026lt; reader.FieldCount; fieldCnt++) { datas.Add((string)reader[fieldCnt]); } }  Datatable의 데이터 접근 방식 다각화  Console.WriteLine(ds2.Tables[\u0026#34;comp2\u0026#34;].Rows[^1][0] + \u0026#34; \u0026#34; + ds2.Tables[0].Rows[^1][1]); \rSummary  Reference Link\nSQL-Dataadapter\nSQL-Connection Pooling\nDatatable-column\n\r"
},
{
	"uri": "https://nocturover.github.io/git/troubleshooting/03_timeout/",
	"title": "03. TimeOut",
	"tags": [],
	"description": "",
	"content": "1. Trouble  ssh: connect to host github.com port 22: Connection timed out pull / push 에서 원격 저장소에 접근하지 못하여 발생하는 timed out err.\n\r2. Shooting  git config --local -e\t// .git/config 파일 code 편집모드로 실행 ├─── config url = git@github.com:nocturover/repo.git ----- [change to] ----- url = https://github.com/nocturover/repo.git 기존 ssh url 방식으로 등록되어있던 원격저장소 url을 https url 포멧으로 변경해준다.\n\r3. Summary  Reference\nAsk Question\nSometimes, firewalls refuse to allow SSH connections entirely. If using HTTPS cloning with credential caching is not an option, you can attempt to clone using an SSH connection made over the HTTPS port. Most firewall rules should allow this, but proxy servers may interfere.\n\r"
},
{
	"uri": "https://nocturover.github.io/daily/03_%EB%A7%88%EC%9D%8C%EA%B4%80%EB%A6%AC/",
	"title": "03. 마음관리",
	"tags": [],
	"description": "",
	"content": "1\n심리적 변화의 원천을 아는 것은 더한 심연에 빠지는 것을 방지해줄 수 있다.\n자기 자신이 현재 어떤 기분을 느끼고 있는가, 이것은 무슨 감정이며 어디에서 발현된 것인가를 고민해보자.\n물론 답이 나오지 않는 경우도 있겠지만, 대게는 그와 비슷했던 과거의 경험들이 오버랩되면서 현재의 상태가 이해될 수 있으리라 생각된다.\n내가 현재 뭘하고 있는 건가 방향성이 흔들릴 때도 분명히 있다.\n그런 불안감을 잠재우기 위해서 자잘한 계획들을 세우기도 하고 현실의 상황과 미래의 상황을 구체적으로 그려가는 편이다.\n자신을 아는 것은 감정을 다스리기 위한 제 1 법칙과도 같다. 내가 어떤 사고에 의해 행동하는 알고리즘을 이해하면 시도하는 과정을 시스템화 시키는 것도 가능할 것이다.\n\r2\n"
},
{
	"uri": "https://nocturover.github.io/hello/sample/",
	"title": "00. Sample",
	"tags": [],
	"description": "",
	"content": "Overview  \r\rSample Title  first \rcode \rthird \nTroubleshooting  \r       \nSummary  Reference Link\nHomePage LInk\n\r\r"
},
{
	"uri": "https://nocturover.github.io/review/",
	"title": "Review",
	"tags": [],
	"description": "Review",
	"content": "Overview 이 곳은 책, Documentation ,논문 을 리뷰하는 공간입니다.\n"
},
{
	"uri": "https://nocturover.github.io/csharp/winform/04_treeview_finder/",
	"title": "04. TreeView Text Finder",
	"tags": [],
	"description": "",
	"content": "Overview  Treeview 컨트롤에서 string text 검색을 통해 매치되는 값을 Highlight 시키는 방법을 기술.\n\r\rTreeView Features  특징  Treeview 는 기본적으로 Node단위의 객체가 엮여진 형태로 존재함으로, 이 Node내 Node를 탐색하는 과정을 풀어내야 한다. 탐색기능은 String Equal() Method를 이용할 수 있으며, 대/소문자 구별을 무시함으로써 보다 넓은 범위의 정보를 포획할 수 있다.  \rCode  tvCopied Treeview Control의 모든 Node를 탐색하여 매칭되는 Node의 BackColor를 LightYellow로 변경  private List\u0026lt;TreeNode\u0026gt; NodeThatMatches = new();\t// 탐색된 Node Collection. private int selectedNum = 0;\t// 탐색 textbox에서 Enter를 눌러 다음 매칭 노드로 이동(Focus + Highlight)  private void txtFind_TextChanged(object sender, EventArgs e) { if (tvCopied.SelectedNode != null)\t// 이전 탐색 Node가 존재할 경우 Hightlight를 제거  tvCopied.SelectedNode.BackColor = Color.White; NodeThatMatches.Clear();\t// Text Changed 이벤트에 따라 이전 매칭 Collection Clear().  selectedNum = 0; foreach (TreeNode node in tvCopied.Nodes) { FindTextRecursive(node, txtFind.Text); if (NodeThatMatches.Count \u0026gt; 0) { tvCopied.SelectedNode = NodeThatMatches[0]; tvCopied.SelectedNode.BackColor = Color.LightYellow; } } void FindTextRecursive(TreeNode parentNode, string text) { foreach (TreeNode node in parentNode.Nodes) { if (node.Text.Contains(text, StringComparison.OrdinalIgnoreCase))\t// 대/소문자 구분 무시  { NodeThatMatches.Add(node); } FindTextRecursive(node, text);\t// 하위 노드 재귀적 탐색  } } } private void txtFind_KeyDown(object sender, KeyEventArgs e) { if (e.KeyCode == Keys.Enter) { e.SuppressKeyPress = true;\t// Enter Key눌림 무시  if ( NodeThatMatches.Count \u0026gt; 0)\t// 이전 index [0]에 대한 highlight를 white color로 바꾸고 다음 순서 매치  { tvCopied.SelectedNode.BackColor = Color.White; if (selectedNum == NodeThatMatches.Count - 1) { selectedNum = -1; } tvCopied.SelectedNode = NodeThatMatches[++selectedNum]; tvCopied.SelectedNode.BackColor = Color.LightYellow; } } } \nTroubleshooting   \r       \nSummary  Reference Link\nWinForms TreeView - how to manually \u0026ldquo;highlight\u0026rdquo; node (like it was clicked)\n\r\r"
},
{
	"uri": "https://nocturover.github.io/csharp/db/04_db_%EC%A0%81%EC%9E%AC_%EB%B0%8F_%EB%B6%88%EB%9F%AC%EC%98%A4%EA%B8%B0/",
	"title": "04. DB 적재 및 불러오기",
	"tags": [],
	"description": "",
	"content": "Overview  Database에 데이터 적재 및 데이터 취득\n\r\rSet Data  Efficient way 빠른 적재를 위해서 connection의 open/close의 최소화와 sql command 전송 횟수 최소화.\nINSERT INTO [tableName] VALUES ([col1_val],[col2_val]),([col1_val],[col2_val]), ...   위 코드와 같이 VALUES 후단 구문에 삽입될 수 있는 데이터들을 리스트 스트링 형태로 담아주는 방식이 필수적.\n  절차1) Pre Query String\nstring queryPreString = \u0026#34;INSERT INTO companyinfo VALUES\u0026#34;;   절차2) Post Query String\nList\u0026lt;string[]\u0026gt; masterList = new List\u0026lt;string[]\u0026gt; {new string[] {\u0026#34;0010\u0026#34;, \u0026#34;alpha\u0026#34;}, new string[] {\u0026#34;0020\u0026#34;, \u0026#34;bravo\u0026#34;}} foreach (string[] list in masterList) { queryPostString += string.Format(\u0026#34;(\u0026#39;{0}\u0026#39;,\u0026#39;{1}\u0026#39;,\u0026#39;{2}\u0026#39;),\u0026#34;, list[0], list[1], now); } queryPostString = queryPostString[..^1];   절차3) Concatenate\nstring queryString = queryPreString + \u0026#34; \u0026#34; + queryPostString + \u0026#34;;\u0026#34;;     \rSQL command Execute   이전 아티클 에서 Database의 table 생성 및 관리에 대한 정리를 마쳤기 때문에, 해당 캡슐화된 클래스를 참조하여 데이터를 추가하거나 Retriving 할 수 있다\n  Insert\nmariaDB.connectDBMS(); mariaDB.setData(queryString); mariaDB.disconnectDBMS();   SELECT\nmariaDB.connectDBMS(); DataSet ds = mariaDB.getData_dataset(this.txtSql.Text); this.dataGridView1.DataSource = ds.Tables[0]; mariaDB.disconnectDBMS();     \rCode using System; using System.Collections.Generic; using System.ComponentModel; using System.Data; using System.Linq; using System.Windows.Forms; namespace UNIT_TEST_DB { public partial class DB_TESTER : Form { private List\u0026lt;string[]\u0026gt; masterList; private MariaDB mariaDB; public OpenAPI_DB() { InitializeComponent(); mariaDB = new MariaDB(~~생략~~); } private void btnInsertAuto_Click(object sender, EventArgs e) { mariaDB.connectDBMS(); Console.WriteLine(\u0026#34;DBMS State : \u0026#34; + mariaDB.DBMSstate); string queryPreString = \u0026#34;INSERT INTO [tableName] VALUES\u0026#34;; string queryPostString = \u0026#34;\u0026#34;; string now = DateTime.Now.ToString(\u0026#34;yyyy-MM-dd HH:mm:ss\u0026#34;); foreach (string[] list in masterList) { queryPostString += string.Format(\u0026#34;(\u0026#39;{0}\u0026#39;,\u0026#39;{1}\u0026#39;,\u0026#39;{2}\u0026#39;),\u0026#34;, list[0], list[1], now); } queryPostString = queryPostString[..^1]; string queryString = queryPreString + \u0026#34; \u0026#34; + queryPostString + \u0026#34;;\u0026#34;; Console.WriteLine(queryString); mariaDB.setData(queryString); mariaDB.disconnectDBMS(); Console.WriteLine(\u0026#34;DBMS State : \u0026#34; + mariaDB.DBMSstate); } private void btnSql_Click(object sender, EventArgs e) { mariaDB.connectDBMS(); Console.WriteLine(\u0026#34;DBMS State : \u0026#34; + mariaDB.DBMSstate); DataSet ds = mariaDB.getData_dataset(this.txtSql.Text);\t// SELECT * FROM [tableName]  this.dataGridView1.DataSource = ds.Tables[0]; mariaDB.disconnectDBMS(); Console.WriteLine(\u0026#34;DBMS State : \u0026#34; + mariaDB.DBMSstate); } } } \r\rTroubleshooting  .NET Framework utf8mb3 미지원\r  MySql Client Console 에서 show variables like 'c%' 를 통해 환경변수 확인\n+----------------------------------+-----------------------------------------------+ | Variable_name | Value | +----------------------------------+-----------------------------------------------+ | character_set_client | utf8mb4 | | character_set_connection | utf8mb4 | | character_set_database | utf8mb4 | | character_set_filesystem | binary | | character_set_results | utf8mb4 | | character_set_server | utf8mb4 | | character_set_system | utf8mb3 | | character_sets_dir | C:\\Program Files\\MariaDB 10.6\\share\\charsets\\ | | check_constraint_checks | ON | | collation_connection | utf8mb4_unicode_ci | | collation_database | utf8mb4_unicode_ci | | collation_server | utf8mb4_unicode_ci | | column_compression_threshold | 100 | | column_compression_zlib_level | 6 | | column_compression_zlib_strategy | DEFAULT_STRATEGY | | column_compression_zlib_wrap | OFF | | completion_type | NO_CHAIN | | concurrent_insert | AUTO | | connect_timeout | 10 | | core_file | OFF | +----------------------------------+-----------------------------------------------+   다음의 설정이 아닌 경우 (utf8mb3 등) 한글이 깨지거나, SQL 구문 자체가 먹히지 않을 수 있다.\n  C:\\Program Files\\MariaDB 10.6\\data\\my.ini 파일 수정\n[mysqld] datadir=C:/Program Files/MariaDB 10.6/data port=3306 innodb_buffer_pool_size=2012M character-set-server=utf8mb4 collation-server=utf8mb4_unicode_ci skip-character-set-client-handshake [client] port=3306 plugin-dir=C:/Program Files/MariaDB 10.6/lib/plugin default-character-set=utf8mb4 [mysql] default-character-set=utf8mb4 [mysqldump] default-character-set=utf8mb4     \rSummary  Reference Link\nDB to DataGridView\nMariaDB utf8 설정\n\r\r"
},
{
	"uri": "https://nocturover.github.io/daily/04_%EB%B0%B0%EC%9B%80/",
	"title": "04. 배움",
	"tags": [],
	"description": "",
	"content": "1\n설계는 언제나 필요하다.\npre- 의 개념으로 학습의 전 단계에서, 프로젝트의 계획 전에도 사소하게는 둘 중 하나의 선택을 해야하는 경우에도 적용될 수 있다.\n정석적이며 보편적인 기본 내용들을 놓치고 싶지 않다면 인쇄물로 접근하는 방식이 간편할 수 있으며, 최신의 정보를 얻어내고 싶다면 공식 문서를 찾아보는 편이 좋다.\n전체적인 흐름을 보고 싶다면, 실제 사용되고 있는 장면을 상상할 여지를 남겨줄 수 있는 비디오를 시청하는 것도 방법이다.\n2\n단축키를 익히는 것 또한 언제나 필요하다.\n삶의 편리함이 주된 목표가 되지는 않는다. 그보다는 꾸준하고 반복되는 피상적인 작업이라면 가장 효율적인 길을 알고 수행하지 않는 것과 모르는 상태로 몰두하는 것은 생산성을 대하는 사고의 차이를 불러오기 때문이다.\n프로그램을 사용한다면 자주 사용되는 단축키를 사용하면 될 것이며,\n직접 만드는 프로그램이라면 타 프로그램에서 사용되는 단축키 중 빈번이 사용되는 단축키들을 적용해보자.\n이를 테면 ctrl-f 혹은 ctrl-tab 등은 색인과 전환을 보다 빠르게 해줄 것이다.\n3\n정리를 하는 방식도 메타인지적 관점에서 사전 접근을 필수적으로 거치자.\n특히나 복잡성이 그물처럼 엮여진 개념이라면, 주제 구분은 물론 도식화도 아끼지 말자.\n결국 기억의 이그나이터가 되어줄 수 있는 것과 반증해줄 수 있는 개념들의 조합이 기억의 강화를 일으킬 수 있다.\n4\n독서를 통해 뇌 메모리를 정리할 수 있다.\n현재 활성화된 프로세스를 모두 꺼버리는 것이 아니라, 필요도에 따른 소팅을 진행하고 새로운 사고의 크기를 키워 절대적 메모리 크기 내의 나머지 불필요한(중요도가 낮은) 프로세스들을 적은 용량을 차지하도록 밀어내는 것이다.\n독서는 이 알고리즘에서 훌륭히 작동된다!\n"
},
{
	"uri": "https://nocturover.github.io/project/",
	"title": "Project",
	"tags": [],
	"description": "Project",
	"content": "Overview 이 곳은 프로젝트의 Trouble shooting 과 진척도를 기록하는 공간입니다.\n"
},
{
	"uri": "https://nocturover.github.io/csharp/winform/05_listbox/",
	"title": "05. ListBox Flicker",
	"tags": [],
	"description": "",
	"content": "Overview  ListBox 컨트롤에서 Item들을 Graphics 객체를 이용해서 직접 Paint하는 방식을 구현\n ListBox 업데이트(DrawItem Event Occur :: e.Graphics.DrawString/DrawFillRectangle)시 발생하는 Flicker 현상을 잡아보자.  \r\rListBox 특징  특징  ListBox는 기본적으로 목록을 나열하는 목적으로 사용됨. ListView 컨트롤의 원시적 요소라고 판단됨. ListBox도 MultiColumns를 지원하지만, Contents의 Overflows에 대해 전체적으로 Oversight할 수 있도록 다음 컬럼으로 넘겨주는 역할만을 수행하며 열의 이름을 지정할 수 없음. ListBox 컨트롤은 .Items[{index}]를 통해 개별 객체를 특정하는 것은 가능하지만 {get;set;} Property로 Object타입만을 반환하여 해당 객체에 대한 ListBoxItem.property 를 지원하지 않음(즉, 아이템의 속성을 변경하기 위해서는; 특히 Visualization 을 변경하기 위해서는 OnPaint()메서드를 오버라이드하거나, Listbox_DrawItem(object sender, DrawItemEventArgs e){} 에 작성하여야 함)  참고) Drawitem에서 작성하는 e.Graphics.~~ 들은 Flicker 현상을 유발함으로, DoubleBuffering 설정과 기본 OnPaint() 메서드를 override하여 **ListBox 개별 요소 Rectangle을 e로 반환하는 과정이 필요**)    \rCode    using System; using System.Collections.Generic; using System.ComponentModel; using System.Data; using System.Drawing; using System.Linq; using System.Reflection; using System.Text; using System.Threading.Tasks; using System.Windows.Forms; namespace TEMP_LISTBOX_DRAWING { public partial class Form1 : Form { private int eventCnt = 0; public Form1() { InitializeComponent(); for (int idx = 0; idx \u0026lt; 10; idx++) listBox1.Items.Add(\u0026#34;itemSample\u0026#34;); // Not normal Draw mode. :: 생략가능 - 해당 객체 생성 시 자동 설정.  listBox1.DrawMode = DrawMode.OwnerDrawVariable; listBox1.DrawItem += listbox1_DrawItem; } private void listbox1_DrawItem(object sender, DrawItemEventArgs e) { txtCnt.AppendText((++eventCnt).ToString() + Environment.NewLine); e.DrawBackground(); // 랜덤한 막대그래프 Background Drawing  e.Graphics.FillRectangle(Brushes.Gray, e.Bounds.X, e.Bounds.Y, e.Bounds.Width * new Random().Next(1, 100) / 100, e.Bounds.Height); e.Graphics.DrawString(listBox1.Items[e.Index].ToString(), e.Font, new SolidBrush(this.ForeColor), new PointF(e.Bounds.X, e.Bounds.Y)); } // ListBox의 개별아이템이 변경되면(Add() 혹은 Item[{index}] = {x}), OnPaint()가 발생하고 DrawItem() Event 를 Occur 시킴으로써 Drawing이 가능한 환경을 만든다.  private void btnAdd_Click(object sender, EventArgs e) { listBox1.Items[0] = txtInput.Text; } private void button1_Click(object sender, EventArgs e) { listBox1.Items[1] = txtInput.Text; } private void button2_Click(object sender, EventArgs e) { int repCnt = 0; if (button2.Text == \u0026#34;Start\u0026#34;) button2.Text = \u0026#34;Stop\u0026#34;; else button2.Text = \u0026#34;Start\u0026#34;; this.BeginInvoke(new Action(async() =\u0026gt; { while (button2.Text == \u0026#34;Stop\u0026#34;) { for (int idx = 0; idx \u0026lt; 10; idx++) { listBox1.Items[idx] = (repCnt++).ToString(); await Task.Delay(1000); } } })); } } } internal class FlickerFreeListBox : System.Windows.Forms.ListBox { public FlickerFreeListBox() { // DoubleBuffer  this.SetStyle( ControlStyles.OptimizedDoubleBuffer | ControlStyles.ResizeRedraw | ControlStyles.UserPaint, true); this.DrawMode = DrawMode.OwnerDrawVariable; } // 만약 Form Main Class에서 직접 컨트롤의 DrawItem 이벤트를 다룬다면 OnDrawItem() 메서드는 생략가능  // or 이벤트 다루지 않고 ListBox 객체 자체에서 DrawItem을 다루기 위해서는 아래를 활성화  protected override void OnDrawItem(DrawItemEventArgs e) { /*if (this.Items.Count \u0026gt; 0) { e.DrawBackground(); e.Graphics.FillRectangle(Brushes.Gray, e.Bounds.X, e.Bounds.Y, e.Bounds.Width * new Random().Next(1,100) / 100, e.Bounds.Height); e.Graphics.DrawString(this.Items[e.Index].ToString(), e.Font, new SolidBrush(this.ForeColor), new PointF(e.Bounds.X, e.Bounds.Y)); } */ base.OnDrawItem(e); // Goto C# EventHandler.  } protected override void OnPaint(PaintEventArgs e) { Region iRegion = new Region(e.ClipRectangle); e.Graphics.FillRegion(new SolidBrush(this.BackColor), iRegion); if (this.Items.Count \u0026gt; 0) { for (int i = 0; i \u0026lt; this.Items.Count; ++i) { System.Drawing.Rectangle irect = this.GetItemRectangle(i); // Clip Rectangle  if (e.ClipRectangle.IntersectsWith(irect)) { // Clicked.  if ((this.SelectionMode == SelectionMode.One \u0026amp;\u0026amp; this.SelectedIndex == i) || (this.SelectionMode == SelectionMode.MultiSimple \u0026amp;\u0026amp; this.SelectedIndices.Contains(i)) || (this.SelectionMode == SelectionMode.MultiExtended \u0026amp;\u0026amp; this.SelectedIndices.Contains(i))) { OnDrawItem(new DrawItemEventArgs(e.Graphics, this.Font, irect, i, DrawItemState.Selected, this.ForeColor, this.BackColor)); } // Not Clicked.  else { OnDrawItem(new DrawItemEventArgs(e.Graphics, this.Font, irect, i, DrawItemState.Default, this.ForeColor, this.BackColor)); } iRegion.Complement(irect); } } } base.OnPaint(e); } } \nTroubleshooting   \r       \nSummary  Reference Link\nListBox Flicker\n\r\r"
},
{
	"uri": "https://nocturover.github.io/daily/05_%ED%97%88%EB%AC%B4%EC%A3%BC%EC%9D%98/",
	"title": "05. 허무주의",
	"tags": [],
	"description": "",
	"content": "1\n피아노를 치기 시작한지 대략 9개월이 다 되었다.\n음악 활동을 하는 건 몰입의 괜찮은 재료로 작용되어, 그 순간만큼은 오감에 집중할 수 있게 된다.\n감정적 기복을 모두 내려놓고 할당된 시간을 연습시간으로 활용함으로써 평균에 해당하는 고요함을 찾기위한 과정이라고 생각된다.\n무기력증, 헛됨, 허무주의로부터의 탈출하길 희망하면서도 파고드는 무력감을 느낄 때면 이런 몰입과정을 거치는 것이 필요할 때라는 신호이다.\n요 며칠간의 망가진 자신의 모습을 보고있자면, 내가 아닌 타인이 되어 나를 바라보는 듯한, 내가 내가 아니게 될 때가 있다.\n나의 실존에 대한 의심은 점차 현실의 감각과의 연결줄의 느슨함으로 이어졌고, 과거의 성취들과 기록들은 저편으로 멀어진다.\n\u0026lsquo;내가 어쩌다 이렇게 되었을까\u0026rsquo;\n의문을 던지기도 전에 이미 내 몸과 마음은 행위에 초점이 맞춰져서 생각보단 움직임이 먼저가 된다.\n큰 흐름을 따라가자던 나의 가치관에서 그 흐름조차도 잊혀져가는 그 시기는 암울함으로 가득하다.\n상황에 탈출을 위해 의존성에 힘을 빌릴 때가 많다.\n타인의 성공가도를 바라보거나 그런 유사한 경험들, 흔히 말하는 동기부여라 하는 컨텐츠들의 소비가 이제는 자연스러운 선택이 되어버렸다.\n나는 무엇을 하고 싶은 것일까.\n스스로의 행복을 위한 길이 무엇인지를 대강은 그려낼 수 있을 것 같았던 시기들도 이 시기가 도래하면 음침함 속에 모두 자취를 감춘다.\n무엇이 그리도 두려워 스스로의 행복마져도 져버리는 행동을 하는 것일까.\n모든 것이 의문으로 남지만, 그럼에도 버리지 말아야 할 것은 변치않음을 유지하는 것.\n이전에 강직한 진리라고 생각했던 것들에 파라미터를 변경하지 않는 것.\n유지하는 것 만으로도 마음위안을 얻을 수 있다.\n"
},
{
	"uri": "https://nocturover.github.io/csharp/db/05_connection_pooling/",
	"title": "05. Connection Pooling",
	"tags": [],
	"description": "",
	"content": "Overview  MariaDB DBMS의 성능향상을 위한 Connection pooling방식에 대해 정리\n\r\rConnection Pooling  개념   Pooling방식은 DBMS 상호작용 방식에서 connection의 Open / Close의 반복적 호출로 걸리는 오베헤드를 감소시키는 성능향상에 기인될 수 있다.\n  연결을 미리 열어두고, 들어오는 각각의 command수행에 대응하여 수행할 수 있도록 arrangement 한다.\n  최대로 설정된 연결 개수에 도달하는 명령수행 요청이 들어오게 된다면, queue의 형태로 해당 수행일정을 계획할 수 있다.\n  MSDN 의 설명에 의하면 Close() Dispose()의 연결 종료와 관련하여 주 메서드(connection, datareader) 등에 다루지 말고, Finalize method 를 생성하고 관리하라고 지침한다.\n  \rcode \rthird \nTroubleshooting  \r       \nSummary  Reference Link\r\r"
},
{
	"uri": "https://nocturover.github.io/daily/06_%EB%AA%A9%ED%91%9C%EC%A7%80%ED%96%A5/",
	"title": "06. 목표지향",
	"tags": [],
	"description": "",
	"content": "1\n무엇보다 나를 난감하게 만드는 것은 스스로의 효용가치를 잊을 때이다.\n무엇을 원하고 어떤 삶을 살아가기를 원하며, 그를 위한 지향점을 상상해나가는 과정 자체를 부정한다.\n"
},
{
	"uri": "https://nocturover.github.io/csharp/",
	"title": "C#",
	"tags": [],
	"description": "C#",
	"content": "Overview  이 곳은 C# 언어의 학습 공간입니다.\n"
},
{
	"uri": "https://nocturover.github.io/daily/07_performance/",
	"title": "07. Performance",
	"tags": [],
	"description": "",
	"content": "1\n모든 기기들은 자신만의 상대적인 성능을 가지고 있다.\n최신의 제품이 과거 제품 보다 가격이 높은 까닭을 증명하기 위한 데이터셋을 제공해주는 역할을 한다. 소비자는 해당 벤치마크나 성능표를 확인하고 나에게 적합한 제품인지를 판단하는 척도로 사용이 가능하다.\n사람도 마찬가지로 성능이 존재한다.\n스스로의 앎을 척도로 나타내자면, 메타인지적 사고능력과 객관화로부터 새로운 계획을 세우고 회귀하는 빈도나 정확도를 점으로 찍어본다면 하나의 성능 결과표가 나올 것이다.\n또한 스스로의 상황에서 최적의 목표를 지향점으로 삼고 환경의 변화에 따른 기존 파라미터의 증감이나 삭제/추가를 연속하며, 온전한 최적화 상황을 만들어가는 것의 빈도나 퀄리티를 척도로 삼을 수도 있겠다.\n결코 효율성과 생산성에서 빠질 수 없는 단어는 집중력이다. 집중의 강도와 지속시간의 길이에 따라 자신의 하드웨어를 얼마만큼 오버클럭킹 할 수 있는가를 보여주기도 한다.\n2\n프로젝트를 완수하는 것은 하나의 시스템을 구축하는 것과 같다.\n시스템이 자신이 의도한 바와 일치하여 움직이기 위해서는 기초바닥부터 모든 것의 조건식을 명시적으로 세워나가야 한다.\n만약 결과값이 다르다면, 조건식의 인수들이 잘못되었을 가능성이 있거나, 필요 없는 조건의 분기가 들어갔을 수도 있다.\n완벽한 결과를 인간에게 바랄 수는 없겠지만, 보완을 통한 최적화 과정을 연속하며 고장률을 줄여나가는 과정은 가능하다.\n"
},
{
	"uri": "https://nocturover.github.io/python/",
	"title": "Python",
	"tags": [],
	"description": "Python",
	"content": "Overview 이 곳은 Python 언어의 학습 공간입니다.\n"
},
{
	"uri": "https://nocturover.github.io/daily/08_%EC%8A%B5%EB%93%9D%EA%B3%BC-%EC%A0%95%EB%A6%AC/",
	"title": "01.Reflection",
	"tags": [],
	"description": "",
	"content": "1.\n정리의 목적이 있다면 상기되는 주기를 줄여 기억의 망각 주기를 거스르기 위해서라고 말할 수 있겠다.\n새로운 것을 습득하는 과정에서\n"
},
{
	"uri": "https://nocturover.github.io/web/",
	"title": "Web",
	"tags": [],
	"description": "Web",
	"content": "Overview 이 곳은 Web / Frontend 언어들의 학습 공간입니다.\n"
},
{
	"uri": "https://nocturover.github.io/git/",
	"title": "Git",
	"tags": [],
	"description": "Git",
	"content": "Overview 이 곳은 Git 사용법의 학습 공간입니다.\nLink Troubleshooting \n Command \n Git \n\r\r"
},
{
	"uri": "https://nocturover.github.io/git/new-file/",
	"title": "Git",
	"tags": [],
	"description": "Git",
	"content": "Overview 이 곳은 Git 사용법의 학습 공간입니다.\nLink\r\r"
},
{
	"uri": "https://nocturover.github.io/windows/",
	"title": "Windows",
	"tags": [],
	"description": "Windows",
	"content": "Overview 이 곳은 Windows OS의 설정 및 사용방법에 대한 공간입니다.\nLink cmder \n Installation \n\r\r"
},
{
	"uri": "https://nocturover.github.io/linux/",
	"title": "Linux",
	"tags": [],
	"description": "Linux",
	"content": "Overview 이 곳은 Linux OS의 설정 및 사용방법에 대한 공간입니다.\n"
},
{
	"uri": "https://nocturover.github.io/shortcodes/",
	"title": "Shortcodes",
	"tags": [],
	"description": "",
	"content": "A bunch of Shortcodes are available with this theme :\n\rattachments\rThe Attachments shortcode displays a list of files attached to a page.\n\r\rbadge\rDisclaimers to help you structure your page\n\r\r"
},
{
	"uri": "https://nocturover.github.io/csharp/winform/06_formtoform/",
	"title": "",
	"tags": [],
	"description": "",
	"content": "title: \u0026ldquo;06. Data shares multiple Forms\u0026rdquo; date: 2022-01-08T16:33:29+09:00 draft: false weight: 7\nOverview  다중 폼에서의 데이터 전달에 대한 방법을 기술.\n\r\rMethods  Static Global Class  public static class GLOBAL{} 같은 네임스페이스에 속한 클래스들은 해당 GLOBAL 정적 클래스의 맴버, 프로퍼티들에 접근하여 해당 값들을 Sharing. 코드의 관리가 용이  public class 할당  양 폼에 동일한 클래스를 정의하고 메인폼에서 서브폼으로 public을로 접근 가능한 동일 객체에 선언한다. 메인폼에서 모든 데이터를 관리할 수 있으며, 서브폼의 수명이 다하여 소멸 시 해당 복제 객체 처분(Dispose)만 해준다면 메모리 리크를 관리해줄 수 있다.  \rCode  Main Form  namespace UNIT_TEST_GLOBAL { public partial class Form1 : Form { TestAPI testAPI = new TestAPI(3406); public Form1() { InitializeComponent(); StartSubForm(); } private void StartSubForm() { SubForm sub = new SubForm(); sub.testAPI = this.testAPI; TextBox txtBox = new TextBox() { Text = \u0026#34;test sample text\u0026#34;, Location = new Point(10, 10), Size = new Size(20, 60), }; sub.txtTest = txtBox; sub.Controls.Add(txtBox); sub.Load += (sender, e) =\u0026gt; { Console.WriteLine($\u0026#34;In SubForm Id: {sub.testAPI.Id}\u0026#34;); Console.WriteLine((this.testAPI == sub.testAPI).ToString()) ; Console.WriteLine(); sub.testAPI.Id = 1999; Console.WriteLine($\u0026#34;In Form1 Id: {this.testAPI.Id}\u0026#34;); Console.WriteLine($\u0026#34;In SubForm Id: {sub.testAPI.Id}\u0026#34;); Console.WriteLine((this.testAPI == sub.testAPI).ToString()) ; Console.WriteLine(sub.txtTest.Text); }; sub.FormClosed += (sender, e) =\u0026gt; { Console.WriteLine(); Console.WriteLine(\u0026#34;subForm Closed.\u0026#34;); Console.WriteLine($\u0026#34;In Form1 Id: {this.testAPI.Id}\u0026#34;); Console.WriteLine($\u0026#34;In SubForm Id: {sub.testAPI.Id}\u0026#34;); Console.WriteLine(sub.txtTest.Text); }; sub.Show(); } } public class TestAPI { public int Id { get; set; } public TestAPI(int Id) { this.Id = Id; Console.WriteLine($\u0026#34;Success To Init value. [{this.Id}]\u0026#34;); } } }  Sub Form  namespace UNIT_TEST_GLOBAL { public partial class SubForm : Form { public TestAPI testAPI; public TextBox txtTest; public SubForm() { InitializeComponent(); } private void button1_Click(object sender, EventArgs e) { this.Close(); this.Dispose(); txtTest.Dispose(); } } } Troubleshooting   \r       \nSummary  Reference Link\r\r"
},
{
	"uri": "https://nocturover.github.io/shortcodes/attachments/",
	"title": "attachments",
	"tags": [],
	"description": "The Attachments shortcode displays a list of files attached to a page.",
	"content": "The Attachments shortcode displays a list of files attached to a page. Example : \t\rAttachments\r\rCarroll_AliceAuPaysDesMerveilles.pdf\u0026nbsp;(175 kB)adivorciarsetoca00cape.pdf\u0026nbsp;(212 kB)hugo.png\u0026nbsp;(17 kB)movieselectricsheep-flock-244-32500-2.mp4\u0026nbsp;(340 kB)zip.mp3\u0026nbsp;(57 kB)\r\rUsage The shortcurt lists files found in the _files folder.\nIf your page is a folderA, attachements must be place in a '_files' subfolder.  content └── folderA ├── _index.md └── _files ├── attachment.pdf └── attachment.pdf That\u0026rsquo;s all !\nTip : Look at this documentation source code on github\rparameters    Parameter Default Description     title \u0026ldquo;Attachments\u0026rdquo; List\u0026rsquo;s title   pattern \u0026ldquo;.*\u0026rdquo; A regular expressions, used to filter the attachments by file name. \rThe pattern parameter value must be regular expressions.\nFor example:\n To match a file suffix of \u0026lsquo;jpg\u0026rsquo;, use *.jpg (not *.jpg). To match file names ending in \u0026lsquo;jpg\u0026rsquo; or \u0026lsquo;png\u0026rsquo;, use .*(jpg|png)  \r    Demo List of attachments ending in pdf or mp4 {{%attachments title=\u0026#34;Related files\u0026#34; pattern=\u0026#34;.*(pdf|mp4)\u0026#34;/%}} renders as\n\t\rRelated files\r\r\rCarroll_AliceAuPaysDesMerveilles.pdf\r\r\u0026nbsp;(175 kB)\r\r\radivorciarsetoca00cape.pdf\r\r\u0026nbsp;(212 kB)\r\r\rmovieselectricsheep-flock-244-32500-2.mp4\r\r\u0026nbsp;(340 kB)\r\r\r"
},
{
	"uri": "https://nocturover.github.io/shortcodes/badge/",
	"title": "badge",
	"tags": [],
	"description": "Disclaimers to help you structure your page",
	"content": "primary (default) In progress docport beta danger warning info light dark\nShortcode markup new {{% badge %}}primary _(default)_{{% /badge %}} {{% badge warning %}}In progress{{% /badge %}} {{% badge secondary %}}docport{{% /badge %}} {{% badge success %}}beta{{% /badge %}} {{% badge danger %}}danger{{% /badge %}} {{% badge warning %}}warning{{% /badge %}} {{% badge info %}}info{{% /badge %}} {{% badge light %}}light{{% /badge %}} {{% badge dark %}}dark{{% /badge %}} Usage {{%badge $style %}}Lorem ipsum{{%/badge%}}    Parameter Description     $style type/color of badge    "
}]