<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Winform on 1998</title>
    <link>https://nocturover.github.io/csharp/winform/</link>
    <description>Recent content in Winform on 1998</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Fri, 07 Jan 2022 13:33:29 +0900</lastBuildDate><atom:link href="https://nocturover.github.io/csharp/winform/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>01_Form_Group</title>
      <link>https://nocturover.github.io/csharp/winform/01_form_group/</link>
      <pubDate>Mon, 25 Oct 2021 19:40:36 +0900</pubDate>
      
      <guid>https://nocturover.github.io/csharp/winform/01_form_group/</guid>
      <description>Overview  .csproj 내에서 파일을 관리하는 방법 중 winform dependent 방식을 소개

Way  Premise  partial class의 작성 .csproj.user 파일 itemgroup 항목 수정  Code .csproj.user &amp;lt;?xml version=&amp;#34;1.0&amp;#34; encoding=&amp;#34;utf-8&amp;#34;?&amp;gt; &amp;lt;Project ToolsVersion=&amp;#34;Current&amp;#34; xmlns=&amp;#34;http://schemas.microsoft.com/developer/msbuild/2003&amp;#34;&amp;gt; &amp;lt;ItemGroup&amp;gt; &amp;lt;Compile Update=&amp;#34;childForm/ChildAccount.cs&amp;#34;&amp;gt; &amp;lt;SubType&amp;gt;Form&amp;lt;/SubType&amp;gt; &amp;lt;/Compile&amp;gt; &amp;lt;Compile Update=&amp;#34;childForm/ChildAccount.ANIMATION.cs&amp;#34; DependentUpon=&amp;#34;childForm/ChildAccount.cs&amp;#34;&amp;gt; &amp;lt;/Compile&amp;gt; &amp;lt;Compile Update=&amp;#34;childForm/ChildAccount.OPENAPI.cs&amp;#34; DependentUpon=&amp;#34;childForm/ChildAccount.cs&amp;#34;&amp;gt; &amp;lt;/Compile&amp;gt; &amp;lt;/ItemGroup&amp;gt; &amp;lt;ItemGroup&amp;gt; &amp;lt;EmbeddedResource Update=&amp;#34;Properties\Resources.resx&amp;#34;&amp;gt; &amp;lt;SubType&amp;gt;Designer&amp;lt;/SubType&amp;gt; &amp;lt;/EmbeddedResource&amp;gt; &amp;lt;/ItemGroup&amp;gt; &amp;lt;/Project&amp;gt;  ItemGroup 내 의존성을 정의 - update=[child] DependentUpon=[parent]  &amp;lt;Compile Update=&amp;#34;childForm/ChildAccount.OPENAPI.cs&amp;#34; DependentUpon=&amp;#34;childForm/ChildAccount.cs&amp;#34;&amp;gt;&amp;lt;/Compile&amp;gt; 
Troubleshooting  1 .</description>
    </item>
    
    <item>
      <title>02. C# Event</title>
      <link>https://nocturover.github.io/csharp/winform/02_event/</link>
      <pubDate>Thu, 28 Oct 2021 13:59:29 +0900</pubDate>
      
      <guid>https://nocturover.github.io/csharp/winform/02_event/</guid>
      <description>Overview  C# 문법 Event의 실사용 예제 기술

Event  개념   event 단어 자체의 의미로 접근
 특정 행위, 상황의 발생에 따른 신호 전달 신호에 따른 정해진 행위 수행    Delgate (대리자) 는 메서드 자체를 지니고 있는 행위 대리자
  Eventhandler는 행위 대리자로 선언되며,
 행위 대리자인 Eventhandler에 행위(Method)를 추가 혹은 제거하여 하나의 신호 발생원에 대응하여 수행 object /EventArgs 는 이벤트 신호원으로부터 개별적 특성을 정의 Lambda식을 사용하여 간결하게 메서드를 Eventhandler에 담을 수 있음.</description>
    </item>
    
    <item>
      <title>03. Thread/Invoke/BeginInvoke</title>
      <link>https://nocturover.github.io/csharp/winform/03_winform_thread/</link>
      <pubDate>Sun, 31 Oct 2021 18:33:29 +0900</pubDate>
      
      <guid>https://nocturover.github.io/csharp/winform/03_winform_thread/</guid>
      <description>Overview  WinForm에서 멀티 쓰레딩 환경을 구성하는 방법을 기술
WinForm Environment  개념   WinForm은 기본적으로 main() 메서드 내에서 Application.Run(new Form1())을 수행하게 되고 따라서 UI Thread라고 명명되는 MainThread환경에서 동작되게 된다.
  이는 WinForm에서 컨트롤을 업데이트 하는 과정을 포함하여 모든 코드 동작이 MainThread 내에서 일어남을 의미하며, 따라서 다른 쓰레드에서 접근하여 컨트롤을 업데이트하는 것을 금지한다. ( Throw Cross-Thread Exception )
  이러한 이유로 새로운 Thread를 생성하여 무거운 작업(DB Select / FileStream)을 수행한 후에 결과 Form에 반영하기 위한 Thread.</description>
    </item>
    
    <item>
      <title>04. TreeView Text Finder</title>
      <link>https://nocturover.github.io/csharp/winform/04_treeview_finder/</link>
      <pubDate>Sun, 12 Dec 2021 18:33:29 +0900</pubDate>
      
      <guid>https://nocturover.github.io/csharp/winform/04_treeview_finder/</guid>
      <description>Overview  Treeview 컨트롤에서 string text 검색을 통해 매치되는 값을 Highlight 시키는 방법을 기술.
TreeView Features  특징  Treeview 는 기본적으로 Node단위의 객체가 엮여진 형태로 존재함으로, 이 Node내 Node를 탐색하는 과정을 풀어내야 한다. 탐색기능은 String Equal() Method를 이용할 수 있으며, 대/소문자 구별을 무시함으로써 보다 넓은 범위의 정보를 포획할 수 있다.  Code  tvCopied Treeview Control의 모든 Node를 탐색하여 매칭되는 Node의 BackColor를 LightYellow로 변경  private List&amp;lt;TreeNode&amp;gt; NodeThatMatches = new();	// 탐색된 Node Collection.</description>
    </item>
    
    <item>
      <title>05. ListBox Flicker</title>
      <link>https://nocturover.github.io/csharp/winform/05_listbox/</link>
      <pubDate>Fri, 07 Jan 2022 13:33:29 +0900</pubDate>
      
      <guid>https://nocturover.github.io/csharp/winform/05_listbox/</guid>
      <description>Overview  ListBox 컨트롤에서 Item들을 Graphics 객체를 이용해서 직접 Paint하는 방식을 구현
 ListBox 업데이트(DrawItem Event Occur :: e.Graphics.DrawString/DrawFillRectangle)시 발생하는 Flicker 현상을 잡아보자.  ListBox 특징  특징  ListBox는 기본적으로 목록을 나열하는 목적으로 사용됨. ListView 컨트롤의 원시적 요소라고 판단됨. ListBox도 MultiColumns를 지원하지만, Contents의 Overflows에 대해 전체적으로 Oversight할 수 있도록 다음 컬럼으로 넘겨주는 역할만을 수행하며 열의 이름을 지정할 수 없음. ListBox 컨트롤은 .Items[{index}]를 통해 개별 객체를 특정하는 것은 가능하지만 {get;set;} Property로 Object타입만을 반환하여 해당 객체에 대한 ListBoxItem.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://nocturover.github.io/csharp/winform/06_formtoform/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://nocturover.github.io/csharp/winform/06_formtoform/</guid>
      <description>title: &amp;ldquo;06. Data shares multiple Forms&amp;rdquo; date: 2022-01-08T16:33:29+09:00 draft: false weight: 7
Overview  다중 폼에서의 데이터 전달에 대한 방법을 기술.
Methods  Static Global Class  public static class GLOBAL{} 같은 네임스페이스에 속한 클래스들은 해당 GLOBAL 정적 클래스의 맴버, 프로퍼티들에 접근하여 해당 값들을 Sharing. 코드의 관리가 용이  public class 할당  양 폼에 동일한 클래스를 정의하고 메인폼에서 서브폼으로 public을로 접근 가능한 동일 객체에 선언한다. 메인폼에서 모든 데이터를 관리할 수 있으며, 서브폼의 수명이 다하여 소멸 시 해당 복제 객체 처분(Dispose)만 해준다면 메모리 리크를 관리해줄 수 있다.</description>
    </item>
    
  </channel>
</rss>
