<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Common on 1998</title>
    <link>https://nocturover.github.io/csharp/common/</link>
    <description>Recent content in Common on 1998</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Fri, 13 May 2022 16:04:30 +0900</lastBuildDate><atom:link href="https://nocturover.github.io/csharp/common/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>01.Reflection</title>
      <link>https://nocturover.github.io/csharp/common/01_common/</link>
      <pubDate>Fri, 13 May 2022 16:04:30 +0900</pubDate>
      
      <guid>https://nocturover.github.io/csharp/common/01_common/</guid>
      <description>Overview  C# 문법 Reflection 의 활용법 기술
Wiki  동적 바인딩 기능을 내포한 객체  일반적으로 코드의 컴파일이 된 시점부터 프로그램은 컴파일된 코드의 구성에 따라 거동된다. Reflection을 이용하면 객체의 생성과 연결(binding), Invoking Method, Event Subscribing Method List를 추출하여 동적으로 사용하는 것이 가능하다. Plug-In 방식의 코드 구성에 활용가능하다.  Usage  Event - Get Invocation List  이번 챕터에서는 하나의 Instance 객체의 특정 이벤트에 등록된 Method를 추출하여 호출(Invoke)하거나, Window.</description>
    </item>
    
  </channel>
</rss>
