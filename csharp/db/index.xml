<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>DB on 1998</title>
    <link>https://nocturover.github.io/csharp/db/</link>
    <description>Recent content in DB on 1998</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Fri, 29 Oct 2021 17:30:29 +0900</lastBuildDate><atom:link href="https://nocturover.github.io/csharp/db/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>01. MariaDB connection</title>
      <link>https://nocturover.github.io/csharp/db/01_mariadb_connection/</link>
      <pubDate>Sun, 24 Oct 2021 14:01:41 +0900</pubDate>
      
      <guid>https://nocturover.github.io/csharp/db/01_mariadb_connection/</guid>
      <description>Overview  오픈소스 DBMS MariaDB 와 C#의 연동을 기술.
Installation  종속성   MySql.Data Assembly Download &amp;amp; Install
  프로젝트 종속성 로드
  cd C:\Program Files (x86)\MySQL\MySQL Connector Net 8.0.27\Assemblies\net5.0\MySql.Data.dll Connection  Code :: Form using System; using System.Windows.Forms; using MySql.Data.MySqlClient;	// Load;  namespace UNIT_TEST_DB { public partial class MainForm : Form { public MainForm() { InitializeComponent(); } ~MainForm() { conn.Close(); conn.Dispose(); } MySqlConnection conn;	// local variable;  private bool connectMariaDB() { string connStr = string.</description>
    </item>
    
    <item>
      <title>02. SQL 문법</title>
      <link>https://nocturover.github.io/csharp/db/02_sql_%EB%AC%B8%EB%B2%95/</link>
      <pubDate>Sun, 24 Oct 2021 18:06:41 +0900</pubDate>
      
      <guid>https://nocturover.github.io/csharp/db/02_sql_%EB%AC%B8%EB%B2%95/</guid>
      <description>Overview  SQL에서 사용되는 문법의 정리
Structure :: SQL  DDL :: Data Defination Language  CREATE ALTER DROP  DML :: Data Manipulation Language  SELECT = query statement DELETE INSERT UPDATE  DCL :: Data Control Language  GRANT REVOKE  Command  CREATE CREATE DATABASE `tastdb`; CREATE TABLE `testtable` (code INT(6) UNSIGNED ZEROFILL NOT NULL PRIMARY KEY , name VARCHAR(20) NOT NULL, lastUpdate DATETIME NOT NULL);  SQl Command 전송으로 테이블을 직접 생성할 시 각 데이터 유형 생성 방법 (순서 유의)  UNSIGNED - 부호 없음 ZEROFILL - 0으로 채움 NOT NULL - Null 값 없음 PRIMARY KEY - 기본 키 DEFAULT [val] - 기본 값    INSERT INSERT INTO testDB.</description>
    </item>
    
    <item>
      <title>03. SQL 캡슐화</title>
      <link>https://nocturover.github.io/csharp/db/03_sql_%EC%BA%A1%EC%8A%90%ED%99%94/</link>
      <pubDate>Wed, 27 Oct 2021 00:40:41 +0900</pubDate>
      
      <guid>https://nocturover.github.io/csharp/db/03_sql_%EC%BA%A1%EC%8A%90%ED%99%94/</guid>
      <description>Overview  MairaDB - C#의 연동 및 기타 메서드를 담는 클래스 생성
Architecture  목적 :: 캡슐화  DB의 사용방식을 최대한 독립시킴으로써 타 소스들과의 의존성을 줄임. 단, (단일적 &amp;amp;&amp;amp; 외부 사용 필수) 요소는 static 허용 처리 방식의 고수준화  디자인  Member - Property - Structure - Method - TestCase  Warning  한정자  한정자의 등장배경 개념에 따른 코드 스탠다드 정형화 필요.  private - 소스 코드 내에서만 Retrieving public - 인스턴스로 외부에서 적용될 때 static - global setting의 개념 (단일성 - singleton Design pattern)    Execute command  반환값에 따른 방법 적용  ExecuteScalar - 1개 요소 ExecuteReader - next/current 방식 ExecuteAdapter - fill in Dataset[Datatable]    MySqlConnection  conn 할당 후 conn.</description>
    </item>
    
    <item>
      <title>04. DB 적재 및 불러오기</title>
      <link>https://nocturover.github.io/csharp/db/04_db_%EC%A0%81%EC%9E%AC_%EB%B0%8F_%EB%B6%88%EB%9F%AC%EC%98%A4%EA%B8%B0/</link>
      <pubDate>Wed, 27 Oct 2021 18:20:29 +0900</pubDate>
      
      <guid>https://nocturover.github.io/csharp/db/04_db_%EC%A0%81%EC%9E%AC_%EB%B0%8F_%EB%B6%88%EB%9F%AC%EC%98%A4%EA%B8%B0/</guid>
      <description>Overview  Database에 데이터 적재 및 데이터 취득
Set Data  Efficient way 빠른 적재를 위해서 connection의 open/close의 최소화와 sql command 전송 횟수 최소화.
INSERT INTO [tableName] VALUES ([col1_val],[col2_val]),([col1_val],[col2_val]), ...   위 코드와 같이 VALUES 후단 구문에 삽입될 수 있는 데이터들을 리스트 스트링 형태로 담아주는 방식이 필수적.
  절차1) Pre Query String
string queryPreString = &amp;#34;INSERT INTO companyinfo VALUES&amp;#34;;   절차2) Post Query String
List&amp;lt;string[]&amp;gt; masterList = new List&amp;lt;string[]&amp;gt; {new string[] {&amp;#34;0010&amp;#34;, &amp;#34;alpha&amp;#34;}, new string[] {&amp;#34;0020&amp;#34;, &amp;#34;bravo&amp;#34;}} foreach (string[] list in masterList) { queryPostString += string.</description>
    </item>
    
    <item>
      <title>05. Connection Pooling</title>
      <link>https://nocturover.github.io/csharp/db/05_connection_pooling/</link>
      <pubDate>Fri, 29 Oct 2021 17:30:29 +0900</pubDate>
      
      <guid>https://nocturover.github.io/csharp/db/05_connection_pooling/</guid>
      <description>Overview  MariaDB DBMS의 성능향상을 위한 Connection pooling방식에 대해 정리
Connection Pooling  개념   Pooling방식은 DBMS 상호작용 방식에서 connection의 Open / Close의 반복적 호출로 걸리는 오베헤드를 감소시키는 성능향상에 기인될 수 있다.
  연결을 미리 열어두고, 들어오는 각각의 command수행에 대응하여 수행할 수 있도록 arrangement 한다.
  최대로 설정된 연결 개수에 도달하는 명령수행 요청이 들어오게 된다면, queue의 형태로 해당 수행일정을 계획할 수 있다.
  MSDN 의 설명에 의하면 Close() Dispose()의 연결 종료와 관련하여 주 메서드(connection, datareader) 등에 다루지 말고, Finalize method 를 생성하고 관리하라고 지침한다.</description>
    </item>
    
  </channel>
</rss>
